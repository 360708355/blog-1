{"tags":[{"name":"NodeJs","permalink":"http://lingyu.wang/tags/NodeJs/","url":"/async/tags/NodeJs.json","count":14},{"name":"WebIM","permalink":"http://lingyu.wang/tags/WebIM/","url":"/async/tags/WebIM.json","count":9},{"name":"WebSocket","permalink":"http://lingyu.wang/tags/WebSocket/","url":"/async/tags/WebSocket.json","count":8},{"name":"xmpp","permalink":"http://lingyu.wang/tags/xmpp/","url":"/async/tags/xmpp.json","count":1}],"categories":[{"name":"即时通信","permalink":"http://lingyu.wang/categories/即时通信/","url":"/async/categories/即时通信.json","count":9}],"url":"/async/posts/2013/12/08/websocket.json","date":1386432000000,"path":{"year":2013,"month":12,"day":8,"name":"websocket"},"subtitle":"使用WebSocket+NodeJs搭建聊天室","title":"搭建HTML5简易聊天室","permalink":"http://lingyu.wang/2013/12/08/websocket/","content":"<h3 id=\"前面的话\">前面的话</h3><hr>\n<p>之前曾经写过一个符合xmpp协议的Web IM，但使用的是JSJaC，后台用的也是与之配套的jabber client，发现nodejs的事件模式更适合作为Web IM的客户端。</p>\n<p>而传统的ajax轮询机制也早晚被全双工websocket所取代，所以就打算在我的毕业设计的Web IM平台中使用websocket。</p>\n<p>在这里调研一下并作出了一个简单的版聊demo，这里讲一下这个简单demo的实现方式</p>\n<a id=\"more\"></a>\n<h3 id=\"WebSocket\">WebSocket</h3><hr>\n<p>什么是WebSocket？</p>\n<p><a href=\"http://datatracker.ietf.org/doc/rfc6455/?include_text=1\" target=\"_blank\" rel=\"external\">WebSocket的协议</a> 目前还没有仔细去研读，有时间研读一下</p>\n<p>根据<a href=\"http://www.websocket.org/\" target=\"_blank\" rel=\"external\">WebSocket.org</a>上的定义：</p>\n<blockquote>\n<p>The WebSocket specification—developed as part of the HTML5 initiative—      introduced the WebSocket JavaScript interface, which defines a full-duplex single socket connection over which messages can be sent between client and server. The WebSocket standard simplifies much of the complexity around bi-directional web communication and connection management.</p>\n</blockquote>\n<p>如上所述websocket定义了一个浏览器和服务器之间的全双工的单一的socket连接。</p>\n<p>WebSocket的API？</p>\n<p><a href=\"http://dev.w3.org/html5/websockets/\" target=\"_blank\" rel=\"external\">W3C的WS的API</a> ，定义了具体的WS的接口，而一般只要注意怎么使用就行了，可以清楚地看到WS客户端的几个事件：</p>\n<ol>\n<li>onopen  在WS客户端和WS服务器建立连接成功后调用</li>\n<li>onmessage 在WS服务器给WS客户端发送数据时调用</li>\n<li>onerror 如果连接失败，发送、接收数据失败或者处理数据出现错误，则会被调用</li>\n<li>onclose 在WS客户端接收到WS服务器关闭时进行调用</li>\n</ol>\n<h3 id=\"WebSocket服务器实现\">WebSocket服务器实现</h3><hr>\n<p>nodejs有很多websocket的三方库，都很实用，在stackoverflow上有人问过具体应该使用哪个库，而回答者给与了<a href=\"http://stackoverflow.com/questions/16392260/which-websocket-library-to-use-with-node-js\" target=\"_blank\" rel=\"external\">较为全面的解答</a></p>\n<p>这里面对各个websocket库进行了一个对比，可以根据自己的需要选择。</p>\n<p>其中可以注意一下<a href=\"http://socket.io/#home\" target=\"_blank\" rel=\"external\">socket.io</a>，它对不同的浏览器有比较好的支持，在不支持websocket的时候可以转变成ajax的轮询等其他的替换，浏览器的支持也相当不错。同时还能和目前比较流行的node的web框架express相结合，其文档的例子写的很好。</p>\n<p>由于我只是想搭建一个简单快捷的WS服务器，所以选用了号称probably the fastest WebSocket library for node.js的<a href=\"https://github.com/einaros/ws\" target=\"_blank\" rel=\"external\">ws</a> </p>\n<p>在项目中使用npm安装：</p>\n<pre><code>npm <span class=\"keyword\">install</span> ws\n</code></pre><p>如果需要使用命令行的简易WS客户端，可以：</p>\n<pre><code>npm <span class=\"keyword\">install</span> ws -g\n</code></pre><p>创建一个WS服务器：</p>\n<pre><code><span class=\"reserved\">var</span> WebSocketServer = <span class=\"built_in\">require</span>(<span class=\"string\">'ws'</span>).Server,\n    wss = <span class=\"keyword\">new</span> WebSocketServer({\n    <span class=\"attribute\">port</span>: process.env.WSPORT || <span class=\"number\">3001</span>\n});\n</code></pre><p>这样wss就成为了一个监听3001端口的WS服务器，我们需要为WS服务器创建WS客户端连接时候的事件：</p>\n<pre><code>wss.<span class=\"keyword\">on</span>(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(ws)</span> <span class=\"comment\">{}</span>);</span>\n</code></pre><p>这样，在有WS客户端连接我们的WS服务器时就会触发这个事件，但连接之后我么还需要传递信息，所以需要丰富这个事件的回调函数。</p>\n<p>回调函数有一个参数ws，这个ws掌管着和WS客户端的连接，其事件也和WS客户端相同，不过不需要onopen。需要绑定的还有message，close：</p>\n<pre><code>wss.<span class=\"keyword\">on</span>(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(ws)</span> {</span>\n    <span class=\"keyword\">ws</span>.<span class=\"keyword\">on</span>(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data)</span> {</span>\n\n    });\n    <span class=\"keyword\">ws</span>.<span class=\"keyword\">on</span>(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> {</span>\n\n    });\n});\n</code></pre><p>message事件在WS客户端给这个WS服务器发数据时调用，data就是这个数据，一般为string类型</p>\n<p>close事件在WS客服端给这个WS服务器发送关闭请求时调用</p>\n<p>一个简单的聊天室，需要在一个用户加入时告诉其他所有用户有新用户加入，也就是需要一个广播的方法，我们可以根据ws的示例来定义广播方法：</p>\n<pre><code>wss.broadcast = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.clients) <span class=\"keyword\">this</span>.clients[i].send(<span class=\"built_in\">JSON</span>.stringify(data));\n};\n</code></pre><p>这里可以看到wss的clients存放了所有与wss相连的WS客户端连接。</p>\n<p>在一个WS客户端连接了WS服务器，我们需要把现有的所有房间内用户的信息给新进入房间的用户，并告诉所有房间内的用户有新用户加入，默认新进入房间的用户叫“游客”，修改代码：</p>\n<pre><code>wss.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ws</span>) </span>{\n    ws.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n    });\n    ws.on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n    });\n    <span class=\"comment\">//给每个用户一个单独的id</span>\n    ws.uid = uuid.v4();\n    <span class=\"comment\">//新进入房间的用户的昵称</span>\n    ws.nick = <span class=\"string\">\"游客\"</span>;\n    <span class=\"comment\">//把目前所有房间内人员的信息发给新用户</span>\n    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.clients) {\n        ws.send(<span class=\"built_in\">JSON</span>.stringify({\n            nick: <span class=\"keyword\">this</span>.clients[i].nick,\n            uid: <span class=\"keyword\">this</span>.clients[i].uid,\n            type: <span class=\"string\">\"join\"</span>\n        }));\n    }\n    <span class=\"comment\">//将新加入用户的信息告诉所有房间内的用户</span>\n    wss.broadcast({\n        nick: ws.nick,\n        uid: ws.uid,\n        type: <span class=\"string\">\"join\"</span>\n    });\n});\n</code></pre><p>这样新用户加入时的服务器端处理就完成了</p>\n<p>在一个用户向服务器发送信息时,需要广播这条信息,同时也要指出发送人的信息,所以修改代码:</p>\n<pre><code><span class=\"tag\">ws</span><span class=\"class\">.on</span>(<span class=\"string\">'message'</span>, <span class=\"function\">function</span>(data) {\n    <span class=\"tag\">wss</span><span class=\"class\">.broadcast</span>({\n        <span class=\"attribute\">nick</span>: ws.nick,\n        <span class=\"attribute\">uid</span>: ws.uid,\n        <span class=\"attribute\">time</span>: <span class=\"function\">moment</span>(data.time).<span class=\"function\">format</span>(<span class=\"string\">\"HH:mm:ss\"</span>),\n        <span class=\"attribute\">message</span>: data.message,\n        <span class=\"attribute\">type</span>: <span class=\"string\">\"message\"</span>\n    });\n});\n</code></pre><p>在一个WS客户端向WS服务器发送关闭请求时，需要通知其他所有房间内的用户，所以修改代码：</p>\n<pre><code><span class=\"tag\">ws</span><span class=\"class\">.on</span>(<span class=\"string\">'close'</span>, <span class=\"function\">function</span>() {\n    <span class=\"tag\">wss</span><span class=\"class\">.broadcast</span>({\n        <span class=\"attribute\">nick</span>: ws.nick,\n        <span class=\"attribute\">uid</span>: ws.uid,\n        <span class=\"attribute\">type</span>: <span class=\"string\">\"exit\"</span>\n    });\n});\n</code></pre><p>在一个用户要修改自己的昵称，WS客户端需要向WS服务器发送申请，所以修改代码：</p>\n<pre><code>ws<span class=\"built_in\">.</span><span class=\"keyword\">on</span>(<span class=\"string\">'message'</span>, function(<span class=\"built_in\">data</span>) {\n    <span class=\"comment\">//解析数据</span>\n    <span class=\"built_in\">data</span> <span class=\"subst\">=</span> JSON<span class=\"built_in\">.</span>parse(<span class=\"built_in\">data</span>);\n    <span class=\"comment\">//若为message,则为WS客户端向WS服务器发送信息,进行广播</span>\n    <span class=\"keyword\">if</span> (<span class=\"built_in\">data</span><span class=\"built_in\">.</span><span class=\"keyword\">type</span> <span class=\"subst\">===</span> <span class=\"string\">\"message\"</span>) {\n        wss<span class=\"built_in\">.</span>broadcast({\n            nick: ws<span class=\"built_in\">.</span>nick,\n            uid: ws<span class=\"built_in\">.</span>uid,\n            time: moment(<span class=\"built_in\">data</span><span class=\"built_in\">.</span>time)<span class=\"built_in\">.</span>format(<span class=\"string\">\"HH:mm:ss\"</span>),\n            message: <span class=\"built_in\">data</span><span class=\"built_in\">.</span>message,\n            <span class=\"keyword\">type</span>: <span class=\"string\">\"message\"</span>\n        });\n    <span class=\"comment\">//若为nickname,则为WS客户端向WS服务器发送昵称修改请求,则修改用户昵称,并进行广播</span>\n    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">data</span><span class=\"built_in\">.</span><span class=\"keyword\">type</span> <span class=\"subst\">===</span> <span class=\"string\">\"nickname\"</span>) {\n        wss<span class=\"built_in\">.</span>broadcast({\n            oldnick: ws<span class=\"built_in\">.</span>nick,\n            nick: <span class=\"built_in\">data</span><span class=\"built_in\">.</span>nick,\n            uid: ws<span class=\"built_in\">.</span>uid,\n            <span class=\"keyword\">type</span>: <span class=\"string\">\"nickname\"</span>\n        });\n        ws<span class=\"built_in\">.</span>nick <span class=\"subst\">=</span> <span class=\"built_in\">data</span><span class=\"built_in\">.</span>nick;\n    }\n});\n</code></pre><p>这样一个简单的聊天室的WS服务器就完成了,所有代码如下:</p>\n<pre><code><span class=\"keyword\">var</span> WebSocketServer = <span class=\"built_in\">require</span>(<span class=\"string\">'ws'</span>).Server,\n    wss = <span class=\"keyword\">new</span> WebSocketServer({\n        port: process.env.WSPORT || <span class=\"number\">3001</span>\n    });\n\nwss.broadcast = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.clients) <span class=\"keyword\">this</span>.clients[i].send(<span class=\"built_in\">JSON</span>.stringify(data));\n};\n\nwss.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ws</span>) </span>{\n    ws.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>{\n        data = <span class=\"built_in\">JSON</span>.parse(data);\n        <span class=\"keyword\">if</span> (data.type === <span class=\"string\">\"message\"</span>) {\n            wss.broadcast({\n                nick: ws.nick,\n                uid: ws.uid,\n                time: moment(data.time).format(<span class=\"string\">\"HH:mm:ss\"</span>),\n                message: data.message,\n                type: <span class=\"string\">\"message\"</span>\n            });\n        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data.type === <span class=\"string\">\"nickname\"</span>) {\n            wss.broadcast({\n                oldnick: ws.nick,\n                nick: data.nick,\n                uid: ws.uid,\n                type: <span class=\"string\">\"nickname\"</span>\n            });\n            ws.nick = data.nick;\n        }\n    });\n    ws.on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n        wss.broadcast({\n            nick: ws.nick,\n            uid: ws.uid,\n            type: <span class=\"string\">\"exit\"</span>\n        });\n    });\n    ws.uid = uuid.v4();\n    ws.nick = <span class=\"string\">\"游客\"</span>;\n    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.clients) {\n        ws.send(<span class=\"built_in\">JSON</span>.stringify({\n            nick: <span class=\"keyword\">this</span>.clients[i].nick,\n            uid: <span class=\"keyword\">this</span>.clients[i].uid,\n            type: <span class=\"string\">\"join\"</span>\n        }));\n    }\n    wss.broadcast({\n        nick: ws.nick,\n        uid: ws.uid,\n        type: <span class=\"string\">\"join\"</span>\n    });\n});\n</code></pre><h3 id=\"WebSocket客户端实现\">WebSocket客户端实现</h3><hr>\n<p>在浏览器中,则需要建立一个WS客户端</p>\n<pre><code><span class=\"comment\">//创建一个WS客户端</span>\n<span class=\"keyword\">var</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">\"ws://localhost:3001\"</span>);\n</code></pre><p>给它按照WebSocket的API绑定事件:</p>\n<pre><code><span class=\"comment\">//WS客户端连接到WS服务器后, 设定默认昵称,并加入版聊</span>\nws<span class=\"built_in\">.</span>onopen <span class=\"subst\">=</span> function(event) {\n    $(<span class=\"string\">\"#nickname\"</span>)<span class=\"built_in\">.</span>val(<span class=\"string\">\"游客\"</span>);\n    <span class=\"variable\">$logs.append</span>(<span class=\"string\">\"&lt;div class='alert alert-success'&gt;您已加入版聊&lt;/div&gt;\"</span>);\n};\n<span class=\"comment\">//如果WS服务器关闭,给予断开提示</span>\nws<span class=\"built_in\">.</span>onclose <span class=\"subst\">=</span> function(event) {\n    <span class=\"variable\">$logs.append</span>(<span class=\"string\">\"&lt;div class='alert alert-danger'&gt;您已断开版聊&lt;/div&gt;\"</span>);\n};\n<span class=\"comment\">//如果WS服务器向这个WS客户端发送信息:</span>\nws<span class=\"built_in\">.</span>onmessage <span class=\"subst\">=</span> function(event) {\n    <span class=\"built_in\">var</span> <span class=\"built_in\">data</span> <span class=\"subst\">=</span> JSON<span class=\"built_in\">.</span>parse(event<span class=\"built_in\">.</span><span class=\"built_in\">data</span>);\n    <span class=\"comment\">//发送文本信息, 显示到页面上</span>\n    <span class=\"keyword\">if</span> (<span class=\"built_in\">data</span><span class=\"built_in\">.</span><span class=\"keyword\">type</span> <span class=\"subst\">===</span> <span class=\"string\">\"message\"</span>) {\n        <span class=\"variable\">$chat.append</span>(<span class=\"string\">\"&lt;p&gt;\"</span> <span class=\"subst\">+</span> <span class=\"built_in\">data</span><span class=\"built_in\">.</span>nick <span class=\"subst\">+</span> <span class=\"string\">\"(\"</span> <span class=\"subst\">+</span> <span class=\"built_in\">data</span><span class=\"built_in\">.</span>time <span class=\"subst\">+</span> <span class=\"string\">\"): \"</span> <span class=\"subst\">+</span> <span class=\"built_in\">data</span><span class=\"built_in\">.</span>message <span class=\"subst\">+</span> <span class=\"string\">\"&lt;/p&gt;\"</span>);\n    <span class=\"comment\">//有新用户加入, 显示用户加入通知, 并修改当前用户列表</span>\n    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">data</span><span class=\"built_in\">.</span><span class=\"keyword\">type</span> <span class=\"subst\">===</span> <span class=\"string\">\"join\"</span>) {\n        <span class=\"keyword\">if</span> ($(<span class=\"string\">\"p[uid='\"</span> <span class=\"subst\">+</span> <span class=\"built_in\">data</span><span class=\"built_in\">.</span>uid <span class=\"subst\">+</span> <span class=\"string\">\"']\"</span>, <span class=\"variable\">$users</span>)<span class=\"built_in\">.</span>length <span class=\"subst\">===</span> <span class=\"number\">0</span>) {\n            <span class=\"variable\">$users.append</span>(<span class=\"string\">\"&lt;p uid='\"</span> <span class=\"subst\">+</span> <span class=\"built_in\">data</span><span class=\"built_in\">.</span>uid <span class=\"subst\">+</span> <span class=\"string\">\"'&gt;\"</span> <span class=\"subst\">+</span> <span class=\"built_in\">data</span><span class=\"built_in\">.</span>nick <span class=\"subst\">+</span> <span class=\"string\">\"&lt;/p&gt;\"</span>);\n            <span class=\"variable\">$logs.append</span>(<span class=\"string\">\"&lt;div class='alert alert-warning'&gt;\"</span> <span class=\"subst\">+</span> <span class=\"built_in\">data</span><span class=\"built_in\">.</span>nick <span class=\"subst\">+</span> <span class=\"string\">\"加入了版聊&lt;/div&gt;\"</span>);\n        }\n    <span class=\"comment\">//有用户离开, 显示用户离开通知, 并修改当前用户列表</span>\n    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">data</span><span class=\"built_in\">.</span><span class=\"keyword\">type</span> <span class=\"subst\">===</span> <span class=\"string\">\"exit\"</span>) {\n        $(<span class=\"string\">\"p[uid='\"</span> <span class=\"subst\">+</span> <span class=\"built_in\">data</span><span class=\"built_in\">.</span>uid <span class=\"subst\">+</span> <span class=\"string\">\"']\"</span>, <span class=\"variable\">$users</span>)<span class=\"built_in\">.</span>remove();\n        <span class=\"variable\">$logs.append</span>(<span class=\"string\">\"&lt;div class='alert alert-warning'&gt;\"</span> <span class=\"subst\">+</span> <span class=\"built_in\">data</span><span class=\"built_in\">.</span>nick <span class=\"subst\">+</span> <span class=\"string\">\"离开了版聊&lt;/div&gt;\"</span>);\n    <span class=\"comment\">//有用户修改昵称, 显示用户修改昵称, 修改用户列表</span>\n    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">data</span><span class=\"built_in\">.</span><span class=\"keyword\">type</span> <span class=\"subst\">===</span> <span class=\"string\">\"nickname\"</span>) {\n        $(<span class=\"string\">\"#nickname\"</span>)<span class=\"built_in\">.</span>val(<span class=\"built_in\">data</span><span class=\"built_in\">.</span>nick);\n        $(<span class=\"string\">\"p[uid='\"</span> <span class=\"subst\">+</span> <span class=\"built_in\">data</span><span class=\"built_in\">.</span>uid <span class=\"subst\">+</span> <span class=\"string\">\"']\"</span>, <span class=\"variable\">$users</span>)<span class=\"built_in\">.</span>text(<span class=\"built_in\">data</span><span class=\"built_in\">.</span>nick);\n        <span class=\"variable\">$logs.append</span>(<span class=\"string\">\"&lt;div class='alert alert-warning'&gt;\"</span> <span class=\"subst\">+</span> <span class=\"built_in\">data</span><span class=\"built_in\">.</span>oldnick <span class=\"subst\">+</span> <span class=\"string\">\" 修改昵称为 \"</span> <span class=\"subst\">+</span> <span class=\"built_in\">data</span><span class=\"built_in\">.</span>nick <span class=\"subst\">+</span> <span class=\"string\">\"&lt;/div&gt;\"</span>);\n    }\n};\n</code></pre><p>具体需要发送信息时,使用ws.send发送：</p>\n<pre><code><span class=\"comment\">//从WS客户端向WS服务器发送信息数据</span>\n<span class=\"tag\">ws</span><span class=\"class\">.send</span>(JSON.<span class=\"function\">stringify</span>({\n    <span class=\"attribute\">time</span>: new <span class=\"function\">Date</span>().<span class=\"function\">getTime</span>(),\n    <span class=\"attribute\">message</span>: message,\n    <span class=\"attribute\">type</span>: <span class=\"string\">\"message\"</span>\n}));\n</code></pre><p>需要发送修改昵称请求时，采用同样的方式：</p>\n<pre><code><span class=\"comment\">//从WS客户端向WS服务器发送昵称修改请求</span>\n<span class=\"tag\">ws</span><span class=\"class\">.send</span>(JSON.<span class=\"function\">stringify</span>({\n    <span class=\"attribute\">nick</span>: nick,\n    <span class=\"attribute\">type</span>: <span class=\"string\">\"nickname\"</span>\n}));\n</code></pre><p>这样一个完整的WS客户端代码：</p>\n<pre><code><span class=\"comment\">//创建一个WS客户端</span>\nvar ws = new WebSocket<span class=\"params\">(<span class=\"string\">\"ws://localhost:3001\"</span>)</span>;\n<span class=\"comment\">//WS客户端连接到WS服务器后, 设定默认昵称,并加入版聊</span>\nws.onopen = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(event)</span> {</span>\n    $<span class=\"params\">(<span class=\"string\">\"#nickname\"</span>)</span>.val<span class=\"params\">(<span class=\"string\">\"游客\"</span>)</span>;\n    $logs.append<span class=\"params\">(<span class=\"string\">\"&lt;div class='alert alert-success'&gt;您已加入版聊&lt;/div&gt;\"</span>)</span>;\n};\n<span class=\"comment\">//如果WS服务器关闭,给予断开提示</span>\nws.onclose = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(event)</span> {</span>\n    $logs.append<span class=\"params\">(<span class=\"string\">\"&lt;div class='alert alert-danger'&gt;您已断开版聊&lt;/div&gt;\"</span>)</span>;\n};\n<span class=\"comment\">//如果WS服务器向这个WS客户端发送信息:</span>\nws.onmessage = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(event)</span> {</span>\n    var data = JSON.parse<span class=\"params\">(event.data)</span>;\n    <span class=\"comment\">//发送文本信息, 显示到页面上</span>\n    <span class=\"keyword\">if</span> <span class=\"params\">(data.type === <span class=\"string\">\"message\"</span>)</span> {\n        $chat.append<span class=\"params\">(<span class=\"string\">\"&lt;p&gt;\"</span> + data.nick + <span class=\"string\">\"(\"</span> + data.time + <span class=\"string\">\"): \"</span> + data.message + <span class=\"string\">\"&lt;/p&gt;\"</span>)</span>;\n    <span class=\"comment\">//有新用户加入, 显示用户加入通知, 并修改当前用户列表</span>\n    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"params\">(data.type === <span class=\"string\">\"join\"</span>)</span> {\n        <span class=\"keyword\">if</span> <span class=\"params\">($<span class=\"params\">(<span class=\"string\">\"p[uid='\"</span> + data.uid + <span class=\"string\">\"']\"</span>, $users)</span>.length === <span class=\"number\">0</span>)</span> {\n            $users.append<span class=\"params\">(<span class=\"string\">\"&lt;p uid='\"</span> + data.uid + <span class=\"string\">\"'&gt;\"</span> + data.nick + <span class=\"string\">\"&lt;/p&gt;\"</span>)</span>;\n            $logs.append<span class=\"params\">(<span class=\"string\">\"&lt;div class='alert alert-warning'&gt;\"</span> + data.nick + <span class=\"string\">\"加入了版聊&lt;/div&gt;\"</span>)</span>;\n        }\n    <span class=\"comment\">//有用户离开, 显示用户离开通知, 并修改当前用户列表</span>\n    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"params\">(data.type === <span class=\"string\">\"exit\"</span>)</span> {\n        $<span class=\"params\">(<span class=\"string\">\"p[uid='\"</span> + data.uid + <span class=\"string\">\"']\"</span>, $users)</span>.remove<span class=\"params\">()</span>;\n        $logs.append<span class=\"params\">(<span class=\"string\">\"&lt;div class='alert alert-warning'&gt;\"</span> + data.nick + <span class=\"string\">\"离开了版聊&lt;/div&gt;\"</span>)</span>;\n    <span class=\"comment\">//有用户修改昵称, 显示用户修改昵称, 修改用户列表</span>\n    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"params\">(data.type === <span class=\"string\">\"nickname\"</span>)</span> {\n        $<span class=\"params\">(<span class=\"string\">\"#nickname\"</span>)</span>.val<span class=\"params\">(data.nick)</span>;\n        $<span class=\"params\">(<span class=\"string\">\"p[uid='\"</span> + data.uid + <span class=\"string\">\"']\"</span>, $users)</span>.<span class=\"built_in\">text</span><span class=\"params\">(data.nick)</span>;\n        $logs.append<span class=\"params\">(<span class=\"string\">\"&lt;div class='alert alert-warning'&gt;\"</span> + data.oldnick + <span class=\"string\">\" 修改昵称为 \"</span> + data.nick + <span class=\"string\">\"&lt;/div&gt;\"</span>)</span>;\n    }\n};\n<span class=\"comment\">//发送消息按钮事件</span>\n$<span class=\"params\">(<span class=\"string\">\"#send\"</span>)</span>.click<span class=\"params\">(function<span class=\"params\">(event)</span> {\n    var message = $<span class=\"params\">(<span class=\"string\">\"#message\"</span>)</span>.val<span class=\"params\">()</span>;\n    if <span class=\"params\">(message.trim<span class=\"params\">()</span> !== <span class=\"string\">\"\"</span>)</span> {\n        //从WS客户端向WS服务器发送信息数据\n        ws.send<span class=\"params\">(JSON.stringify<span class=\"params\">({\n            time: new Date<span class=\"params\">()</span>.getTime<span class=\"params\">()</span>,\n            message: message,\n            type: <span class=\"string\">\"message\"</span>\n        })</span>)</span>;\n    }\n})</span>;\n<span class=\"comment\">//修改昵称按钮事件</span>\n$<span class=\"params\">(<span class=\"string\">\"#changeNick\"</span>)</span>.click<span class=\"params\">(function<span class=\"params\">(event)</span> {\n    var nick = $<span class=\"params\">(<span class=\"string\">\"#nickname\"</span>)</span>.val<span class=\"params\">()</span>;\n    if <span class=\"params\">(nick.trim<span class=\"params\">()</span> !== <span class=\"string\">\"\"</span>)</span> {\n        //从WS客户端向WS服务器发送昵称修改请求\n        ws.send<span class=\"params\">(JSON.stringify<span class=\"params\">({\n            nick: nick,\n            type: <span class=\"string\">\"nickname\"</span>\n        })</span>)</span>;\n    }\n})</span>;\n</code></pre><h3 id=\"写在最后\">写在最后</h3><hr>\n<p>这样一个完整的基于WebSocket的简单聊天室就完成了，试用一下，虽然功能不完善，但是已经可以用了，并且兼容firefox25和chrome</p>\n"}