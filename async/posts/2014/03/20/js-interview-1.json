{"tags":[{"name":"CSS","permalink":"http://lingyu.wang/tags/CSS/","url":"/async/tags/CSS.json","count":35},{"name":"HTML","permalink":"http://lingyu.wang/tags/HTML/","url":"/async/tags/HTML.json","count":29},{"name":"JavaScript","permalink":"http://lingyu.wang/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":39}],"categories":[{"name":"笔试面试","permalink":"http://lingyu.wang/categories/笔试面试/","url":"/async/categories/笔试面试.json","count":8}],"url":"/async/posts/2014/03/20/js-interview-1.json","date":1395244800000,"path":{"year":2014,"month":3,"day":20,"name":"js-interview-1"},"subtitle":"前端面试题积累系列","title":"前端面试题（1-14）","permalink":"http://lingyu.wang/2014/03/20/js-interview-1/","content":"<p>这两天在一问一答上刷了不少JavaScript题，也做了一些其他的前端面试笔试题，在这里记录一下，积少成多，聚沙成塔！</p>\n<a id=\"more\"></a>\n<h2 id=\"第一题\">第一题</h2><p>下列关于浏览器对象的说法错误的是：</p>\n<ul>\n<li>A：location对象相当于IE浏览器中的地址栏，包含关于当前URL地址的信息</li>\n<li>B: history对象记录了用户在一个李蓝旗中已经访问过的URLS</li>\n<li>C: location对象是window对象的子对象</li>\n<li>D：location对象是history对象的父对象</li>\n</ul>\n<p>这题考查的是location对象和history对象，之前并没有怎么接触过。</p>\n<p>答案是D</p>\n<h3 id=\"location对象\">location对象</h3><p>location对象里面存放了当前URL的一些信息：</p>\n<p><img src=\"http://lingyu.wang/img/fe_interview/1.png\" alt=\"localtion对象存放的信息\"></p>\n<p>location对象同时window对象和window.document对象的子对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">window</span>.location === <span class=\"built_in\">window</span>.document.location</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>我们可以通过修改其href实现跳转</p>\n<h3 id=\"history对象\">history对象</h3><p>history对象是window对象的子对象，里面记录了访问历史：</p>\n<p>history与location对象不同的是，其不存在于window.document对象之中<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">* back()：移动到当前页面的在历史记录中的上一个页面</span><br><span class=\"line\">* forward()：移动到当前页面在历史记录中的下一个页面</span><br><span class=\"line\">* go(n)：接收一个参数n如果参数为正整数或<span class=\"number\">0</span>，移动到当前页面后的第n个页面（<span class=\"number\">0</span>的效果为刷新），如果为负数，移动到当前页面前的第n个页面，超出范围的话将被忽略</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##第二题</span><br><span class=\"line\">析如下JavaScript代码，请问依次打印什么：</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`javascript</span><br><span class=\"line\">console.log(Function instanceof Object);</span><br><span class=\"line\">console.log(Object instanceof Function);</span><br><span class=\"line\">console.log([].constructor === Array.prototype.constructor);</span><br><span class=\"line\">console.log(new Object(1).constructor === new Number(2).constructor);</span></span><br></pre></td></tr></table></figure></p>\n<p>这题考察了Function、Object以及constructor</p>\n<p>首先我们要确定instanceof方法，如A instanceof B，A必须是一个合法的对象，B是一个合法的JavaScript函数。如果函数B在对象A的原型链中被发现，那么instanceof操作符将返回true，否则返回false</p>\n<p>第一行<code>console.log(Function instanceof Object);</code>：</p>\n<p>由于Function.prototype是一个对象，它的构造函数是Object，所以从原型链上来说，所有的函数顺着原型链查找，最后都会到达Object的构造原型的Object.prototype对象，所以答案为true。</p>\n<p>由此我们可以得出另外一个结论，所有的函数instanceof Object的结果，都是true<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;) <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>第二行<code>console.log(Object instanceof Function);</code>：</p>\n<p>因为在JavaScript中所有的构造函数（Object、Function、Array）都是函数，而所有函数都是其构造函数（Function）的实例，所以答案也是true</p>\n<p>第三行<code>console.log(arr.constructor === Array.prototype.constructor);</code>：</p>\n<p>首先我们需要知道constructor的概念，constructor属性始终指向创建当前对象的构造函数。所以很容易得到如下结果:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; [].constructor === <span class=\"built_in\">Array</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>而每个函数都有一个默认的属性prototype，这个prototype的constructor默认指向这个函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">var</span> SomeType = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">&gt; SomeType.prototype.constructor === SomeType</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>由此可以得知：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; [].constructor === <span class=\"built_in\">Array</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">Array</span> === <span class=\"built_in\">Array</span>.prototype.constructor</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">&gt; [].constructor === <span class=\"built_in\">Array</span>.prototype.constructor</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>当然我们哈有另外一个比较简单的思路，其实Array.prototype这个对象比较特殊，它是集上是个数组:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure></p>\n<p>这样就相当于比较<code>[].constructor === [].constructor</code>了，结果自然是true</p>\n<p>第四行<code>console.log(new Object(1).constructor === new Number(2).constructor);</code>：</p>\n<p>说实话我被这个坑了，以为是false，后来发现<code>new Object()</code>方法如果传入一个基础类型或基础类型对象，会自动构造成基础类型对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(<span class=\"number\">123</span>) <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(<span class=\"string\">\"asdf\"</span>) <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(<span class=\"literal\">false</span>) <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Boolean</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">typeof</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"string\">\"object\"</span></span><br></pre></td></tr></table></figure>\n<p>这样就很好理解了，<code>new Object()</code>如果传入一个数字，将会调用new Number()，其他类似。所以这里答案是true</p>\n<h2 id=\"第三题\">第三题</h2><p>下列JavaScript运行完成后，x的值是多少：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> somevar;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = somevar === <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure></p>\n<p>这题错了，囧</p>\n<p>以往一直使用<code>typeof somevar === &#39;undefined&#39;</code>来检测undefined，这下被坑了</p>\n<p>undefined可能出现在如下两种情况之中：</p>\n<ol>\n<li>变量未定义</li>\n<li>定义了变量但未赋值</li>\n</ol>\n<p>使用<code>typeof somevar === &#39;undefined&#39;</code>进行判断：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">typeof</span> somevar === <span class=\"string\">'undefined'</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> someothervar;</span><br><span class=\"line\">&gt; <span class=\"keyword\">typeof</span> someothervar === <span class=\"string\">'undefined'</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>由此可见，这种方法在两种情况下都适用</p>\n<p>使用<code>somevar === undefined</code>进行判断：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; somevar === <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"built_in\">ReferenceError</span>: somevar is not defined</span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> someothervar;</span><br><span class=\"line\">&gt; someothervar === <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>我勒个去…也就是说，这种检测方式仅仅适用于第二种情况，所以这题答案是true</p>\n<h2 id=\"第四题\">第四题</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    toString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"obj作用域内\"</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    func: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> innerfunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            alert(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        innerfunc.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.func.call(<span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure>\n<p>弹出来的第二个对话框内容是什么</p>\n<p>考this的题，没跑了</p>\n<p>首先看<code>obj.func.call(window)</code>，这句使用了call方法指定this，没啥说的，this肯定指向window，所以第一个对话框的内容肯定是<code>[object window]</code>，但是它问第二个对话框，好吧，继续</p>\n<p>进入到func内部，其又用call来调用，传入的还是this，也就是window对象，所以第二个对话框也是window</p>\n<h2 id=\"第五题\">第五题</h2><p>考虑如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">\"Hello world!\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> t1 = message.substring(<span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> t2 = message.substr(<span class=\"number\">1</span>,<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure></p>\n<p>t1，t2的值各是多少？</p>\n<p>通过这道题我才知道原来还有substr这么个玩意…</p>\n<p>首先来看substring方法，其接受两个参数，left和right，分别代表截取的起始点和终点，这是一个左闭右开的区间，right位置的字符不会被截取，所以这里会截取的是message[1], message[2], message[3]三个字符为’ell’</p>\n<p>接下来看substr方法，其亦接受两个参数，left和count，分别代表截取的起始点和截取字符的个数…所以会截取message[1], message[2], message[3], message[4]四个字符，也就是’ello’…</p>\n<h2 id=\"第六题\">第六题</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (a <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure>\n<p>看了那么多关于变量声明提升的概念，这题竟然错了，呵呵</p>\n<p>这题就是考的变量的提升：提升后的代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>) &#123;</span><br><span class=\"line\">    a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure></p>\n<p>这样就很明显了，答案是1…</p>\n<h2 id=\"第七题\">第七题</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">20</span>,</span><br><span class=\"line\">    bar: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> x = <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(foo.bar());</span><br><span class=\"line\">alert((foo.bar)());</span><br><span class=\"line\">alert((foo.bar = foo.bar)());</span><br><span class=\"line\">alert((foo.bar, foo.bar)());</span><br></pre></td></tr></table></figure>\n<p>弹出的内容依次是？</p>\n<p>这题也是考的不同调用方法中的this，本来挺有自信的，但发现和想的不太一样</p>\n<p>第一行<code>foo.bar()</code>比较明显，对象的方法调用，this指向拥有该方法的独享，所以输出值为20</p>\n<p>第二行<code>(foo.bar)()</code>和我想的不太一样，我以为这会是函数调用，结果不是，其也是对象方法调用，this值指向foo对象，所以答案是20</p>\n<p>第三行<code>(foo.bar = foo.bar)()</code>有一个赋值语句，JavaScript的复制语句返回的是被赋予的值，这是函数调用，所以this指向全局对象window，答案是10</p>\n<p>第四行<code>(foo.bar, foo.bar)()</code>，逗号表达式，也是函数调用，都好表达式的值默认是最后的那个值，答案是10</p>\n<h2 id=\"第八题\">第八题</h2><p>在javascript中要改变页面文档的背景色，需要修改document对象的（）属性。</p>\n<p>我凑，才知道document还有这么个神奇的属性可以改变背景颜色，而不是通过改变CSS的方式，答案是<code>bgColor</code>属性，修改完后，body会多一个<code>bgcolor</code>属性，而body的css也会加上一条<code>background-color</code>规则</p>\n<h2 id=\"第九题\">第九题</h2><p>在通过元素的style属性修改CSS时，有横线的属性（如background-color）应该如何表示？</p>\n<p>答案：将横线去掉，横线后的首字母大写，如backgroundColor</p>\n<h2 id=\"第十题\">第十题</h2><p>JavaScript有哪些数据类型？</p>\n<p>答案：一共六种，number、boolean、string、object、null、undefined</p>\n<h2 id=\"第十一题\">第十一题</h2><p>img标签的alt和title分别是什么意思</p>\n<p>答案: title用于给与一些提示性文字鼠标悬停可以看到title的信息。而alt则是在图片无法显示是的替换文字</p>\n<h2 id=\"第十二题\">第十二题</h2><p>实现一个两列，左边宽度自适应，右边宽度固定200px的布局</p>\n<p>答案：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"doctype\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">html</span> <span class=\"attribute\">lang</span>=<span class=\"value\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">meta</span> <span class=\"attribute\">charset</span>=<span class=\"value\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"title\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">style</span>&gt;</span><span class=\"css\"></span><br><span class=\"line\">        <span class=\"class\">.g-sd</span> <span class=\"rules\">&#123;</span><br><span class=\"line\">            <span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\">right</span></span>;</span><br><span class=\"line\">            <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">200px</span></span></span>;</span><br><span class=\"line\">            <span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">400px</span></span></span>;</span><br><span class=\"line\">            <span class=\"rule\"><span class=\"attribute\">background-color</span>:<span class=\"value\"> <span class=\"hexcolor\">#f0f0f0</span></span></span>;</span><br><span class=\"line\">        &#125;</span></span><br><span class=\"line\">        <span class=\"class\">.g-mn</span> <span class=\"rules\">&#123;</span><br><span class=\"line\">            <span class=\"rule\"><span class=\"attribute\">zoom</span>:<span class=\"value\"> <span class=\"number\">1</span></span></span>;</span><br><span class=\"line\">            <span class=\"rule\"><span class=\"attribute\">overflow</span>:<span class=\"value\"> hidden</span></span>;</span><br><span class=\"line\">            <span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">700px</span></span></span>;</span><br><span class=\"line\">            <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"hexcolor\">#f0ffff</span></span></span>;</span><br><span class=\"line\">        &#125;</span></span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"title\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">'g-sd'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">'g-mn'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第十三题\">第十三题</h2><p>如何对JavaScript对象进行深拷贝？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.deepClone = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.prototype.hasOwnProperty,</span><br><span class=\"line\">        toString = <span class=\"built_in\">Object</span>.prototype.toString,</span><br><span class=\"line\">        deepClone = <span class=\"built_in\">Object</span>.prototype.deepClone,</span><br><span class=\"line\">        result,</span><br><span class=\"line\">        iter,</span><br><span class=\"line\">        cur,</span><br><span class=\"line\">        m;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (toString.call(<span class=\"keyword\">this</span>) === <span class=\"string\">'[object Array]'</span>) &#123;</span><br><span class=\"line\">        result = [];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (iter <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        cur = <span class=\"keyword\">this</span>[iter];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasOwnProperty.call(<span class=\"keyword\">this</span>, iter)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> cur === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">                result[iter] = deepClone.call(cur);;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result[iter] = cur;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>测试用例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someObj = &#123;</span><br><span class=\"line\">    num: <span class=\"number\">123</span>,</span><br><span class=\"line\">    str: <span class=\"string\">\"someString\"</span>,</span><br><span class=\"line\">    bool: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    func: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">    obj: &#123;</span><br><span class=\"line\">        arr: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,&#123;</span><br><span class=\"line\">            num: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    arr: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">\"string\"</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(someObj.deepClone());</span><br></pre></td></tr></table></figure></p>\n<p>结果图：</p>\n<p><img src=\"http://lingyu.wang/img/fe_interview/3.png\" alt=\"深度复制成功\"></p>\n<h2 id=\"第十四题\">第十四题</h2><p>动态打印时间，格式为yyyy-MM-dd hh:mm:ss?<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Date</span>.prototype.format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">format</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.prototype.hasOwnProperty,</span><br><span class=\"line\">        timeObj = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"YYYY\"</span>: <span class=\"keyword\">this</span>.getFullYear(),</span><br><span class=\"line\">            <span class=\"string\">\"YY\"</span>: <span class=\"keyword\">this</span>.getFullYear().toString().slice(<span class=\"number\">2</span>),</span><br><span class=\"line\">            <span class=\"string\">\"MM\"</span>: <span class=\"keyword\">this</span>.getMonth() + <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"string\">\"DD\"</span>: <span class=\"keyword\">this</span>.getDate(),</span><br><span class=\"line\">            <span class=\"string\">\"hh\"</span>: <span class=\"keyword\">this</span>.getHours(),</span><br><span class=\"line\">            <span class=\"string\">\"mm\"</span>: <span class=\"keyword\">this</span>.getMinutes(),</span><br><span class=\"line\">            <span class=\"string\">\"ss\"</span>: <span class=\"keyword\">this</span>.getSeconds()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        item,</span><br><span class=\"line\">        value;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (item <span class=\"keyword\">in</span> timeObj)&#123;</span><br><span class=\"line\">        value = timeObj[item];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hasOwnProperty.call(timeObj, item))&#123;</span><br><span class=\"line\">            format = format.replace(item, value &lt; <span class=\"number\">10</span> ? <span class=\"string\">\"0\"</span> + value : value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> format;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().format(<span class=\"string\">\"YYYY-MM-DD hh:mm:ss\"</span>));</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure></p>\n"}