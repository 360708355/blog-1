{"tags":[{"name":"JavaScript","permalink":"http://lingyu.wang/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":39},{"name":"笔试面试题","permalink":"http://lingyu.wang/tags/笔试面试题/","url":"/async/tags/笔试面试题.json","count":2}],"categories":[{"name":"笔试面试","permalink":"http://lingyu.wang/categories/笔试面试/","url":"/async/categories/笔试面试.json","count":8}],"url":"/async/posts/2014/03/08/qunar-interview.json","date":1394208000000,"path":{"year":2014,"month":3,"day":8,"name":"qunar-interview"},"subtitle":"专注细节，考查二分、数组操作、正则表达式","title":"去哪儿笔试题之我答","permalink":"http://lingyu.wang/2014/03/08/qunar-interview/","content":"<p>题目来自： <a href=\"http://www.itmian4.com/forum.php?mod=forumdisplay&amp;fid=44\" target=\"_blank\" rel=\"external\">IT面试论坛</a></p>\n<p>之前想报去哪儿的实习，去参加参加笔试，结果因为填报的时间太晚了，没去成。今天全国统一笔试放出来了笔试题，说实话让我现场写基本上都写不出来…深刻感到了自己实力的不足，在这里借助浏览器内部的调试工具试着写了写，把握一下细节，也算是一种积累了</p>\n<a id=\"more\"></a>\n<h2 id=\"第一题\">第一题</h2><h3 id=\"题目\">题目</h3><p>输入一个有序数组和一个数，若在数组中返回索引，若不在返回应该插入的索引</p>\n<h3 id=\"想法\">想法</h3><p>没啥好想的，经典二分题</p>\n<h3 id=\"实现\">实现</h3><p>因为好久没摸java了，所以写了个JavaScript版本的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getPosInArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr, ele</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.apply(arr) !== <span class=\"string\">'[object Array]'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"The first param must be an array!!!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> ele !== <span class=\"string\">\"number\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"The second param must be a number!!!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left = <span class=\"number\">0</span>,</span><br><span class=\"line\">        right = arr.length - <span class=\"number\">1</span>,</span><br><span class=\"line\">        middle;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; left &lt;= right;) &#123;</span><br><span class=\"line\">        middle = left + <span class=\"built_in\">Math</span>.floor((right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[middle] === ele) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[middle] &gt; ele) &#123;</span><br><span class=\"line\">            right = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>java的也是类似的</p>\n<h2 id=\"第二题\">第二题</h2><h3 id=\"题目-1\">题目</h3><p>给定一个随机数组，数组可能包含数组（也就是说数组元素可能为数组）。要求用js实现一个函数，返回该数组中所有元素，重复的要求去掉。例如：数组[2,3,[4,6,[3,8]],12,10]，返回结果为：[2,3,4,6,8,12,10]</p>\n<h3 id=\"想法-1\">想法</h3><p>数组中的数组，很容易想到的一种方式就是新建一个结果数组，通过递归遍历将不同的值插入到结果数组中，JavaScript中查询结果数组中是否已有某值的时候可以用<code>arr.indexOf(ele) === -1</code>来确定，同时注意一下类型检测，使用<code>Object.prototype.toString.apply(rawArray) === &#39;[object Array]&#39;</code>来进行数组的检测，用<code>typeof</code>来检测基础类型</p>\n<h3 id=\"实现-1\">实现</h3><p>这道题是前端题，自然是JavaScript：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getUniEle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rawArr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.apply(rawArr) !== <span class=\"string\">'[object Array]'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"The param must be an array!!!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [],</span><br><span class=\"line\">        process = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> i,</span><br><span class=\"line\">                m;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, m = arr.length; i &lt; m; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> arr[i] === <span class=\"string\">'number'</span> &amp;&amp; result.indexOf(arr[i]) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    result.push(arr[i]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.apply(arr[i]) === <span class=\"string\">'[object Array]'</span>) &#123;</span><br><span class=\"line\">                    processCurArray(arr[i]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Any element must be an array or a number!!!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    process(rawArr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第三题\">第三题</h2><h3 id=\"题目-2\">题目</h3><p>这个题和腾讯2014校园招聘前端题目是一样的。<br>给定一个URL字符串，要求用js实现一个函数，返回该URL的域名、请求路径、参数和hash值、<br>例如：URL：<code>http://www.qunar.com/plane/queryPlane.html?startTime=xxxx&amp;endTime=xxxxx#tags</code><br>返回结果为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    host: <span class=\"string\">\"www.qunar.com\"</span>,</span><br><span class=\"line\">    path: <span class=\"string\">\"plane/queryPlane.html\"</span>,</span><br><span class=\"line\">    query: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"startTime\"</span>: <span class=\"string\">\"xxxxx\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"endTime\"</span>: <span class=\"string\">\"xxxxx\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hash: <span class=\"string\">\"tags\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注明：xxxx为url编码后的字符串，设计函数是肯定要求把它解码过来！</p>\n<h3 id=\"想法-2\">想法</h3><p>解析url这个题目很常见，容易想到通过正则表达式提取，但是我就栽在这种常见的题目上了，正则怎么写都不对，跪了</p>\n<p>首先要了解一个常规的url分为哪些内容，一个包含所有内容的url大致上长这样：<code>scheme://host:port/path?query#fragment</code>，其中：</p>\n<ul>\n<li>scheme: 通信协议，如http，https，ftp等</li>\n<li>host：主机（域名或者是IP地址）</li>\n<li>port：端口</li>\n<li>path：请求的路径</li>\n<li>query：请求所发送的数据</li>\n<li>fragment：片段，用于指向网页中的片段</li>\n</ul>\n<p>需要知道其中哪些是可能被省略的，最简单的url只有主机，比如skinlayer.com，其他都是可选的。在正则匹配的时候需要使用<code>()?</code>来进行可选时的匹配</p>\n<p>比如如下的url就比较完整：<code>http://www.qunar.com:8080/plane/queryPlane.html?startTime=xxxx&amp;endTime=xxxxx#tags</code></p>\n<ul>\n<li><p>将url拆分，首先匹配scheme，scheme前面都是字母，然后是<code>://</code>，所以可以写出这样的正则:<code>(?:(\\w+)\\:\\/\\/)?</code>，这里用了非捕获性匹配<code>(?:)</code>，匹配到上面的<code>http://</code>部分，但由于非捕获性分组的存在，仅仅捕获了<code>http</code></p>\n</li>\n<li><p>然后匹配主机部分，主机部分不可省略，同时其可能是字母，数字，小数点，下划线，所以可以写出这样的正则：<code>([\\w\\d]+(?:\\.[\\w\\d]+)*)</code>，匹配并捕获到上面的<code>www.qunar.com</code>部分</p>\n</li>\n<li><p>然后匹配端口，同样是可选，格式为<code>:dd</code>，所以可以写出正则：<code>(?:\\:[\\d]+)?</code>，匹配到<code>:8080</code>部分，捕获<code>8080</code></p>\n</li>\n<li><p>然后匹配路径，从之前匹配到之后的?或者#（如果没有query部分，就可能直接碰到#），都是path部分，因此通过排除这两个字符的方式来写正则<code>(?:\\/([^?#]+))?</code>，匹配到<code>/plane/queryPlane.html</code>，捕获<code>plane/queryPlane.html</code></p>\n</li>\n<li><p>接着就是query这个大头了，我们先把里面这一部分抠出来，留在以后再进行详细的处理转换为对象，这里可以看到到#之前都是这个部分<code>(?:\\?([^#]*))?</code>，匹配到<code>?startTime=xxxx&amp;endTime=xxxxx</code>，捕获<code>startTime=xxxx&amp;endTime=xxxxx</code></p>\n</li>\n<li><p>最后捕获一些fragment就行了，很好弄，#后面所有的字符都是这一部分<code>(?:#(.*))?</code></p>\n</li>\n</ul>\n<p>最后再加上起始和结束就可以生成完整的正则表达式了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^(?:(\\w+)\\:\\/\\/)?([\\w\\d]+(?:\\.[\\w]+)*)(?:\\:(\\d+))?(?:\\/([^?#]+))?(?:\\?([^#]*))?(?:#(.*))?$/</span>;</span><br></pre></td></tr></table></figure></p>\n<p>相当长，说实话，如果让我笔试写肯定跪逼了</p>\n<p>然后运用在url字符串上：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regResult = url.match(<span class=\"regexp\">/^(?:(\\w+)\\:\\/\\/)?([\\w\\d]+(?:\\.[\\w]+)*)(?:\\:(\\d+))?(?:\\/([^?#]+))?(?:\\?([^#]*))?(?:#(.*))?$/</span>);</span><br><span class=\"line\"><span class=\"comment\">//[\"http://www.qunar.com:8080/plane/queryPlane.html?startTime=xxxx&amp;endTime=xxxxx#tags\", \"http\", \"www.qunar.com\", \"8080\", \"plane/queryPlane.html\", \"startTime=xxxx&amp;endTime=xxxxx\", \"tags\"]</span></span><br></pre></td></tr></table></figure></p>\n<p>生成的数组各个元素基本上就是我们要的了，除了query部分，对query部分做一下单独的处理，首先利用正则表达式将所有的键值对字符串取出来放在一个数组中：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rawParams = result.query.match(<span class=\"regexp\">/([^=&amp;]+)=([^&amp;=]+)/g</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这个正则由于可能匹配多次，所以用到了全局匹配</p>\n<p>然后将所有的键值对字符串进行分割，分割成键和值插入到结果中就行了，这里分割使用了<code>String.split()</code>方法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result.query = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (rawParams) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = rawParams.length; i--;) &#123;</span><br><span class=\"line\">        tmp = rawParams[i].split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">        result.query[tmp[<span class=\"number\">0</span>]] = <span class=\"built_in\">unescape</span>(tmp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>需要注意题目上有一句话：<code>xxxx为url编码后的字符串，设计函数是肯定要求把它解码过来！</code>，所以这里需要使用unescape来进行解码</p>\n<p>最后完整的代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> parseUrl = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> url !== <span class=\"string\">\"string\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"The param is not a string!!!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url === <span class=\"string\">\"\"</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"The param is an empty string!!!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> regResult = url.match(<span class=\"regexp\">/^(?:(\\w+)\\:\\/\\/)?([\\w\\d]+(?:\\.[\\w]+)*)(?:\\:(\\d+))?(?:\\/([^?#]+))?(?:\\?([^#]*))?(?:#(.*))?$/</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = &#123;</span><br><span class=\"line\">        url: regResult[<span class=\"number\">0</span>],</span><br><span class=\"line\">        scheme: regResult[<span class=\"number\">1</span>],</span><br><span class=\"line\">        host: regResult[<span class=\"number\">2</span>],</span><br><span class=\"line\">        port: regResult[<span class=\"number\">3</span>],</span><br><span class=\"line\">        path: regResult[<span class=\"number\">4</span>],</span><br><span class=\"line\">        query: regResult[<span class=\"number\">5</span>],</span><br><span class=\"line\">        fragment: regResult[<span class=\"number\">6</span>]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result.query !== <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rawParams = result.query.match(<span class=\"regexp\">/([^=&amp;]+)=([^&amp;=]+)/g</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tmp;</span><br><span class=\"line\">        result.query = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rawParams) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = rawParams.length; i--;) &#123;</span><br><span class=\"line\">                tmp = rawParams[i].split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">                result.query[tmp[<span class=\"number\">0</span>]] = <span class=\"built_in\">unescape</span>(tmp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>由于加了非字符串以及空字符串的检测，基本上能解析所有的情况了</p>\n<h2 id=\"总结\">总结</h2><p>这三题都是看似简单（解题思路很容易想到），但实际上实现起来很在乎细节。正则这个东西说实话在纸上写很难保证正确，基本上都是边调试边写，看来要笔试好还有很长的路要走</p>\n"}