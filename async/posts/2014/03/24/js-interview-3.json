{"tags":[{"name":"CSS","permalink":"http://lingyucoder.github.io/tags/CSS/","url":"/async/tags/CSS.json","count":35},{"name":"HTML","permalink":"http://lingyucoder.github.io/tags/HTML/","url":"/async/tags/HTML.json","count":29},{"name":"JavaScript","permalink":"http://lingyucoder.github.io/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":39}],"categories":[{"name":"笔试面试","permalink":"http://lingyucoder.github.io/categories/笔试面试/","url":"/async/categories/笔试面试.json","count":8}],"url":"/async/posts/2014/03/24/js-interview-3.json","date":1395590400000,"path":{"year":2014,"month":3,"day":24,"name":"js-interview-3"},"subtitle":"前端面试题积累系列","title":"前端面试题（26-35）","permalink":"http://lingyucoder.github.io/2014/03/24/js-interview-3/","content":"<p>这两天在一问一答上刷了不少JavaScript题，也做了一些其他的前端面试笔试题，在这里记录一下，积少成多，聚沙成塔！</p>\n<a id=\"more\"></a>\n<h2 id=\"第二十六题\">第二十六题</h2><p>简述一下什么是JSONP？它与AJAX有什么不同？</p>\n<h3 id=\"JSONP是什么\">JSONP是什么</h3><p>JSONP看似和JSON很像，但实际上完全不同，JSON是一种数据交换格式，而JSONP则是一种非官方跨域数据交互协议。由于在页面中，Ajax直接请求存在跨域无权限访问的问题，但使用拥有<code>src</code>属性的标签（<code>&lt;script&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;iframe&gt;</code>）能不受跨域影响，所以一种比较普遍的方式就是通过<code>&lt;script&gt;</code>标签包裹可执行的JavaScript代码，代码内部包含请求所需要的数据和请求响应后需要被触发的回调函数。为了便于客户端使用数据，逐渐就形成了JSONP。它的一个要点就是允许用户传递一个回调函数的参数给服务端，然后服务端将JSON数据包裹在这个回调函数中，这样客户端就可以随意定制自己的函数来自动处理返回的数据了</p>\n<h3 id=\"简单的JSONP实现\">简单的JSONP实现</h3><p>一个简单的实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComments</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getJSON</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">    script.setAttribute(<span class=\"string\">'src'</span>, url);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.head.appendChild(script);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getJSON(<span class=\"string\">\"http://api.duoshuo.com/threads/counts.jsonp?short_name=skyinlayer&amp;threads=/blog/2014/03/20/js-interview-2&amp;callback=getComments\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这里通过JSONP去获取我在多说中的一篇文章下的所有评论，并通过<code>getComments()</code>方法显示出来，由于JSONP返回的数据一定是一段可执行的JavaScript代码，所以通过将其包裹在<code>&lt;script&gt;</code>标签中，在获取后执行。可以看一下获取到的实际内容：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getComments(&#123;<span class=\"string\">\"response\"</span>:&#123;<span class=\"string\">\"\\/blog\\/2014\\/03\\/20\\/js-interview-2\"</span>:&#123;<span class=\"string\">\"thread_id\"</span>:<span class=\"string\">\"1158950126861942862\"</span>,<span class=\"string\">\"channel_key\"</span>:<span class=\"literal\">null</span>,<span class=\"string\">\"thread_key\"</span>:<span class=\"string\">\"\\/blog\\/2014\\/03\\/20\\/js-interview-2\"</span>,<span class=\"string\">\"comments\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"reposts\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"likes\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"weibo_reposts\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"qqt_reposts\"</span>:<span class=\"number\">0</span>&#125;&#125;,<span class=\"string\">\"options\"</span>:&#123;<span class=\"string\">\"comments_zero\"</span>:<span class=\"string\">\"暂无评论\"</span>,<span class=\"string\">\"comments_one\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"comments_multiple\"</span>:<span class=\"string\">\"&#123;num&#125;\"</span>&#125;,<span class=\"string\">\"code\"</span>:<span class=\"number\">0</span>&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>不是很好看，格式化一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getComments(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"response\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"\\/blog\\/2014\\/03\\/20\\/js-interview-2\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"thread_id\"</span>: <span class=\"string\">\"1158950126861942862\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"channel_key\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">            <span class=\"string\">\"thread_key\"</span>: <span class=\"string\">\"\\/blog\\/2014\\/03\\/20\\/js-interview-2\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"comments\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"reposts\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"likes\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"weibo_reposts\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"qqt_reposts\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"options\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"comments_zero\"</span>: <span class=\"string\">\"暂无评论\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"comments_one\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"comments_multiple\"</span>: <span class=\"string\">\"&#123;num&#125;\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"code\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这样就一目了然了，其实JSONP返回的就是一个函数调用，具体调用的函数名称就是我们传递给服务器的callback方法，由于我们自己定义了处理函数，只需要将数据作为参数，调用这个函数就行了</p>\n<h3 id=\"jQuery中的JSONP\">jQuery中的JSONP</h3><p>jQuery中可以使用<code>.getJSON()</code>方法来使用JSONP，如果在url中出现了类似<code>callback=?</code>字段，jQuery将会使用JSONP的方式进行处理</p>\n<p>jQuery还提供了<code>.ajax</code>方法，将其<code>dataType</code>设置成<code>jsonp</code>就能按照JSONP方式获取数据，但实际上JSONP和ajax是两码事，jQuery只是为了方便使用将其包裹在一起，这也是很多人（包括我）误以为JSONP就是Ajax的原因</p>\n<p>jQuery的JSONP实现机制一样，不过它做了一层封装，生成了一个随机的函数名进行JSONP请求，生成的JSONP回调函数名称大致如下<code>jQuery200001010612421669066_1395458842940</code>,它内部会定义一个同名函数，在其内部调用我们传给jQuery的回调函数</p>\n<h2 id=\"第二十七题\">第二十七题</h2><p>JavaScript中的null、undefined、undeclared的区别</p>\n<p>解答：首先需要明确的是，<code>null</code>、<code>undefined</code>是JavaScript中的两个值类型，而<code>undeclared</code>则是语法错误，表明变量未定义。<code>typeof null</code>的值是<code>&#39;object&#39;</code>，这也就说明了null的意思是变量是一个不存在的对象（但它还是对象），而undefined则代表着变量已经声明，但未赋值</p>\n<h2 id=\"第二十八题\">第二十八题</h2><p>实现一个如下的数组复制方法：<code>[1,2,3,4,5].duplicator()</code>，返回结果<code>[1,2,3,4,5,1,2,3,4,5]</code></p>\n<p>解答：<br>这题看似很简单，但是数组内部的元素并没有确定，所以完全可能是对象甚至是数组，所以这题实际上是考的深度复制，相当复杂：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.deepClone = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"keyword\">this</span>) === <span class=\"string\">'[object Array]'</span> ? [] : &#123;&#125;,</span><br><span class=\"line\">        hasOwnProperty = <span class=\"built_in\">Object</span>.prototype.hasOwnProperty,</span><br><span class=\"line\">        deepClone = <span class=\"built_in\">Object</span>.prototype.deepClone,</span><br><span class=\"line\">        item,</span><br><span class=\"line\">        tmp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (item <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        tmp = <span class=\"keyword\">this</span>[item];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> item === <span class=\"string\">'object'</span>)&#123;</span><br><span class=\"line\">            result[item] = tmp.deepClone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result[item] = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.duplicator = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.concat(<span class=\"keyword\">this</span>.deepClone());</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.duplicator());</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第二十九题\">第二十九题</h2><p>谈谈你对Web标准的理解</p>\n<p>参考资料： <a href=\"http://www.alibuybuy.com/posts/55190.html\" target=\"_blank\" rel=\"external\">浅谈web标准、可用性、可访问性</a></p>\n<h3 id=\"什么是Web标准\">什么是Web标准</h3><p>Web标准不是一个标准，而是一系列标准的集合。网页主要由三部分组成：结构、表现和行为。对应的标准也分为三个方面：结构化标准语言（XHTML、XML），表现标准语言（CSS），行为标准主要包括对象模型（W3C DOM）、ECMAScript等</p>\n<h3 id=\"为什么要遵循Web标准\">为什么要遵循Web标准</h3><p>遵循Web标准有如下优点：</p>\n<ol>\n<li>代码的效率：在HTML文件中使用最精简的代码，而把样式也页面布局信息包含进CSS文件中。放在服务器上的文件会变小，下载文件需要时间短。同时CSS文件支持缓存，加载速度更快</li>\n<li>易于维护：页面的样式和布局信息保存在单独的CSS文件中，可在多个页面中引入相同的CSS文件达到网站的一致性，同时需要修改时也仅仅需要修改单独的CSS文件中内容，更加易于维护</li>\n<li>可访问性：对于那些视力受损（盲人、色盲、色弱等等）的用户，通过屏幕阅读器使用键盘命令将网页的内容读给他们听。以语义化的HTML（结构和表现相分离的HTML）编写的网页文件，就可以让此类用户更容易导航，且网页文件中的总要信息也更有可能被这些用户找到</li>\n<li>设备兼容性：纯HTML，无附加样式信息，可以针对具有不同特点的设备而被重新格式胡，只需要引入另外一套样式表即可。同时CSS本身也可以让你为不同的呈现方式和媒体类型规定不同而样式表</li>\n<li>网络爬虫/搜索引擎：搜索引擎使用“爬虫”，解析网页。语义化的HTML能更加快速的被解析，从而知道哪些才是重要的内容，会极大的影响网页在搜索结果中排名</li>\n</ol>\n<h2 id=\"第三十题\">第三十题</h2><p>简述XMLHttpRequest对象，并说明其如何使用</p>\n<h3 id=\"什么是XMLHttpRequst对象\">什么是XMLHttpRequst对象</h3><p>XMLHttpRequest对象是Ajax的核心，用于在后台与服务器中交换数据，使用它能够：</p>\n<ol>\n<li>在不重新加载页面的情况下更新网页</li>\n<li>在页面已加载后从服务器请求数据</li>\n<li>在页面已加载后从服务器接收数据</li>\n<li>在后台服务器发送数据</li>\n</ol>\n<p>需要注意的是所有现代浏览器都支持XMLHttpRequest，但它并不再W3C标准的定义之中…</p>\n<h3 id=\"如何使用\">如何使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个XMLHttpRequest对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"><span class=\"comment\">//定义请求方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> type = <span class=\"string\">\"GET\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//定义获取数据的URL</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"/someAction\"</span></span><br><span class=\"line\"><span class=\"comment\">//定义异步执行还是同步执行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> aysnc = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">//定义需要发送的数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">    param : <span class=\"string\">\"someProperty\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//确定XMLHttpRequest状态变换时的回调函数</span></span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//loaded</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//200 成功</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//失败</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//确定XMLHttpRequest执行的参数</span></span><br><span class=\"line\">xhr.open(type, url, <span class=\"keyword\">async</span>);</span><br><span class=\"line\"><span class=\"comment\">//发送请求</span></span><br><span class=\"line\">xhr.send(data);</span><br></pre></td></tr></table></figure>\n<h2 id=\"第三十一题\">第三十一题</h2><p>简述网页的可用性、可访问性</p>\n<h3 id=\"什么是可用性？\">什么是可用性？</h3><p>可用性（Usability）指的是产品对用户来说有效、易学、高效、好记、少错和令人满意程度，是交互式产品额重要质量指标，是产品竞争力的核心</p>\n<h3 id=\"什么是可访问性？\">什么是可访问性？</h3><p>可访问性（Acessibility）指的是：Web内容对于残障用户的可阅读和可理解性。同时提升可访问性也可以让普通用户更容易理解Web内容</p>\n<h2 id=\"第三十二题\">第三十二题</h2><p>DOM操作，如何添加、移除、移动、复制、创建和查找节点</p>\n<p>创建节点：</p>\n<ol>\n<li>createDocumentFragment()</li>\n<li>createElement()</li>\n<li>createTextNode()</li>\n<li>cloneNode() （可传入bool型参数表明是否复制所有子节点）</li>\n</ol>\n<p>添加：</p>\n<ol>\n<li>appendChild()</li>\n</ol>\n<p>移除：</p>\n<ol>\n<li>removeChild()</li>\n</ol>\n<p>替换：</p>\n<ol>\n<li>replaceChild()</li>\n</ol>\n<p>插入：</p>\n<ol>\n<li>insertBefore()将新元素做为父元素的最后一个子元素进行添加</li>\n</ol>\n<p>查找：</p>\n<ol>\n<li>getElementsByTagName()：通过标签查找，返回一个类似数组的Object对象</li>\n<li>getElementsByName(): 通过Name属性查找，返回一个类似数组的Object对象</li>\n<li>getElementById()：通过元素id查找，返回一个DOM对象，否则返回null</li>\n</ol>\n<p>修改：</p>\n<ol>\n<li>innerHTML改变节点内部结构</li>\n<li>style.property改变样式</li>\n</ol>\n<p>遍历：</p>\n<ol>\n<li>childNodes 获取所有子元素的列表</li>\n</ol>\n<p>属性</p>\n<ol>\n<li>getAttribute()</li>\n<li>setAttribute()</li>\n</ol>\n<h2 id=\"第三十三题\">第三十三题</h2><p>简介HMTL5中的语义元素</p>\n<h3 id=\"语义化元素的优点\">语义化元素的优点</h3><ol>\n<li>使网页结构更清晰</li>\n<li>使代码可读性增强，便于修改和维护</li>\n<li>可访问性</li>\n<li>搜索引擎优化<h3 id=\"article\">article</h3>代表文档、页面或应用程序中独立的、完整的、可以独自被外部引用的内容。article通常有自己的标题（一般放在一个header元素里面），有时候还会有自己的脚注（放在其footer元素中）<h3 id=\"section\">section</h3>用于对网站或应用程序中页面上的内容进行分块。一个section元素通常由内容及其标题组成。如果一个容器只是为了被定义样式或通过脚本定义行为时，建议使用div。需要给section增加一个标题，不建议给没有标题的内容区块使用section元素</li>\n</ol>\n<p>不要将secion和article混淆使用，article元素可以看成一种特殊种类的section元素，它比section元素更强调独立性。即section元素强调分段或分块，而artcle强调独立性，具体来说，如果一块内容相对来说比较独立、完整的时候，应该使用article，如果想将一块内容分成几段，应该使用section</p>\n<h3 id=\"nav\">nav</h3><p>一个可以用作页面导航的链接组，其中的导航元素链接到其他页面或当前页面的其他部分。一般只将主要的、基本的链接组元素放进nav元素即可</p>\n<h3 id=\"aside\">aside</h3><p>用来表示当前页面或文章的附属信息部分，它可以包含当前页面或主要内容相关的引用、侧边栏、广告、导航条，以及其他类似的有别于主要内容的部分。它主要由两种用法</p>\n<ol>\n<li>被包含在article元素中作为主要内容的附属信息部分，其中的内容可以是与当前文章有关的参考资料、名词解释等等</li>\n<li>在article元素之外使用，作为页面或站点全局的附属信息部分</li>\n</ol>\n<h3 id=\"time与微格式\">time与微格式</h3><p>微格式，是一个利用HTML的class属性来网页添加附加信息的方法</p>\n<p>time用来无歧义地、明确地对机器的日期和时间进行编码，并且让人易读的方式来展现他，它有一个pubdate可选属性（boolean值），用于表示这个time元素代表了文章（存在于article元素中时）或整个网页的发布日期</p>\n<h3 id=\"header\">header</h3><p>一种具有引导和导航作用的结构元素，通常用来防止整个页面或页面内的一个内容区块的标题，但也可以包含其他内容。一个网页并未限制header元素的个数，可以拥有多个，可以为每个内容区块（article、section）增加一个header元素。HTML5中，一个header元素至少要包含一个heading元素（h1~h6），也可以包括一个hgroup元素，最新的W3C HTML5标准，它还可以包括nav元素</p>\n<h3 id=\"hgroup\">hgroup</h3><p>将标题及其子标题进行分组的元素，通常会将h1~h6元素进行分组</p>\n<h3 id=\"footer\">footer</h3><p>作为其上层父级内容区块或是一个根区块的脚注，通常包括其相关区块的脚注信息。页面中也未限制footer元素的个数，也可以为article元素或section元素添加footer元素</p>\n<h3 id=\"address\">address</h3><p>用来呈现联系信息，包括文档作者或文档维护者的名字、他们的网站链接、电子邮箱、真实地址、电话号码等</p>\n<h3 id=\"兼容性\">兼容性</h3><p>也可以通过js插件的形式为不支持HTML5语义化元素的浏览器添加HTML5元素支持，一般是使用<code>html5shiv</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span><br><span class=\"line\">&lt;script src=\"dist/html5shiv.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第三十四题\">第三十四题</h2><p>什么是事件的冒泡？如何阻止冒泡？如何阻止事件的默认行为？什么是事件代理？</p>\n<h3 id=\"事件的冒泡\">事件的冒泡</h3><p>在某个元素上触发某类事件，这个事件会向元素的父级元素传播，由里到外，直至它被处理或者它到达了元素层次的最顶层</p>\n<p>另外关于事件的几个需要注意的地方：</p>\n<ol>\n<li>事件冒泡只是事件处理方式的一种，一共有两种事件处理的方式 1) 从里到外的冒泡型事件  2) 从外到里的捕获型事件</li>\n<li>不是所有时间都能冒泡，有很多事件不冒泡：<code>blur</code>、<code>focus</code>、<code>load</code>、<code>unload</code></li>\n<li>阻止冒泡不能阻止对象的默认行为</li>\n</ol>\n<h3 id=\"阻止冒泡\">阻止冒泡</h3><p>可以使用<code>event.stopPropagation()</code>来阻止冒泡</p>\n<p>比如如下HTML结构：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>这是父元素<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"child\"</span>&gt;</span>这是子元素<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>为其添加事件处理器：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"parent\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"child\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> clickHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id + <span class=\"string\">\" is clicked\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//采用冒泡方式处理事件，如果要采用捕获方式处理，将第三个参数改为true</span></span><br><span class=\"line\">parent.addEventListener(<span class=\"string\">\"click\"</span>, clickHandler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">child.addEventListener(<span class=\"string\">\"click\"</span>, clickHandler, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<p>点击子元素后可以看到console框中出现如下结果</p>\n<p><img src=\"http://lingyu.wang/img/fe_interview/6.png\" alt=\"console中显示parent元素和child元素都被点击了\"></p>\n<p>修改处理函数，添加<code>stopPropagaton()</code>方法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> clickHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id + <span class=\"string\">\" is clicked\"</span>);</span><br><span class=\"line\">    evt.stopPropagation();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>再次点击子元素，console中将是如下结果</p>\n<p><img src=\"http://lingyu.wang/img/fe_interview/7.png\" alt=\"console中仅显示child元素都被点击了\"></p>\n<h3 id=\"阻止事件的默认行为\">阻止事件的默认行为</h3><p>在平常我们经常会遇到一个表单中有个提交按钮（type为submit），用于提交表单，但是我们不希望它直接提交，而是希望将其元素值提取之后进行ajax交互，于是就需要屏蔽提交按钮默认行为</p>\n<p>我们可以使用<code>event.preventDefault()</code>来阻止元素事件的默认行为</p>\n<h3 id=\"事件代理\">事件代理</h3><p>如果我们有一个ul元素，其中有100个li元素，每个点击都会触发一个相同的点击事件，那么我们可能需要为这100个li元素各绑定一个回调函数，费时费力费内存。由于事件的冒泡机制，我们可以通过事件代理的方式，只在ul元素上绑定一个click事件，然后确定其event.target对象是否是li元素就行了,如下例所示：</p>\n<p>有一个ul元素，其中5个li元素：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">ul</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"ul\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"title\">li</span> <span class=\"attribute\">value</span>=<span class=\"value\">'1'</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"title\">li</span> <span class=\"attribute\">value</span>=<span class=\"value\">'2'</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"title\">li</span> <span class=\"attribute\">value</span>=<span class=\"value\">'3'</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"title\">li</span> <span class=\"attribute\">value</span>=<span class=\"value\">'4'</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"title\">li</span> <span class=\"attribute\">value</span>=<span class=\"value\">'5'</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>为ul元素绑定一个click事件回调函数来处理所有li元素的click事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"ul\"</span>);</span><br><span class=\"line\">ul.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(evt.target.tagName === <span class=\"string\">'LI'</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"li \"</span> + evt.target.getAttribute(<span class=\"string\">\"value\"</span>) + <span class=\"string\">\" is clicked\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>点击各个li查看效果：</p>\n<p><img src=\"http://lingyu.wang/img/fe_interview/8.png\" alt=\"各个li元素被点击时都会触发事件并显示哪个li元素被点击\"></p>\n<p>这样我们就可以通过为ul增加一个事件代理来处理所有li元素的点击事件了。同理，我们可以使用事件代理让一个元素下的不同子元素共享一个事件处理逻辑</p>\n<h2 id=\"第三十五题\">第三十五题</h2><p>简述伪类和伪元素有什么异同，并写出几个常见的伪类和伪元素</p>\n<p>相当多的人将伪类和伪元素相混淆</p>\n<h3 id=\"相同点\">相同点</h3><p>他们的共同点在于，他们都属于CSS选择器的范畴，CSS引入伪类和伪元素的概念是为了实现基于文档树之外的信息的格式化造成伪类和伪元素混淆的最基本原因，就是他们俩可以使用相同的语法进行添加：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"rule\"><span class=\"attribute\">.someclass</span>:<span class=\"value\">before &#123;&#125;</span><br><span class=\"line\">.someclass:hover &#123;&#125;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"不同点\">不同点</h3><ol>\n<li>伪类时根据元素所具有的不同状态来添加相应的样式，而伪元素则是对元素中特定的内容添加相应的样式</li>\n<li>伪元素和伪类使用语法可以不同，伪元素可以使用<code>::before</code>这样的双冒号来使用（当然使用单冒号也可以），而伪类不行</li>\n<li>伪元素和伪类进行选择器优先级计算时不同，伪元素与标签选择器的优先级为0001，而伪类的优先级与类选择器的优先级一样为0010</li>\n</ol>\n<h3 id=\"一些例子\">一些例子</h3><p><code>before</code>,<code>after</code>,<code>first-line</code>,<code>first-letter</code>都是伪元素，而像<code>link</code>,<code>visited</code>,<code>hover</code>,<code>active</code>,<code>first-child</code>,<code>lang</code>,<code>focus</code>等都是伪类</p>\n"}