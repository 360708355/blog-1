{"tags":[{"name":"CSS","permalink":"http://lingyucoder.github.io/tags/CSS/","url":"/async/tags/CSS.json","count":35}],"categories":[{"name":"CSS","permalink":"http://lingyucoder.github.io/categories/CSS/","url":"/async/categories/CSS.json","count":8}],"url":"/async/posts/2014/02/25/css-selectors-priority.json","date":1393257600000,"path":{"year":2014,"month":2,"day":25,"name":"css-selectors-priority"},"subtitle":"记录CSS优先级计算的规则，再也不用害怕面试官问了","title":"CSS优先级备忘","permalink":"http://lingyucoder.github.io/2014/02/25/css-selectors-priority/","content":"<h2 id=\"常规优先级计算\">常规优先级计算</h2><p>一个选择器的优先级是由如下方式计算的：</p>\n<ul>\n<li>通配符（<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#20803;&#32032;&#36873;&#25321;&#22120;(```div```)&#12289;&#20266;&#20803;&#32032;(```::before```)&#30340;&#26435;&#37325;&#20026;1&#10;* &#31867;&#22411;&#36873;&#25321;&#22120;(```.className```)&#12289;&#23646;&#24615;&#36873;&#25321;&#22120;(```[someAttr=someValue]```)&#12289;&#20266;&#31867;&#36873;&#25321;&#22120;(```:hover```)&#30340;&#26435;&#37325;&#20026;10&#10;* id&#36873;&#25321;&#22120;&#65288;```#```&#65289;&#30340;&#26435;&#37325;&#20026;100&#10;* &#20869;&#32852;&#26679;&#24335;&#65288;HTML&#20013;&#30340;```style=&#34;blahblah&#34;```&#65289;&#20026;1000&#10;* &#22914;&#26524;&#26435;&#37325;&#19968;&#26679;&#65292;&#21518;&#22768;&#26126;&#30340;&#20248;&#20808;&#10;&#10;&#38656;&#35201;&#27880;&#24847;&#30340;&#26159;&#36825;&#37324;&#30340;10&#12289;100&#12289;1000&#24182;&#19981;&#26159;&#21313;&#36827;&#21046;&#30340;&#65292;&#36827;&#21046;&#25968;&#24456;&#22823;&#65292;&#22312;W3C&#19978;&#30340;&#21407;&#35805;&#65306; Concatenating the three numbers a-b-c (in a number system with a large base) gives the specificity.&#10;&#10;&#30830;&#23450;&#20266;&#20803;&#32032;&#26377;&#21738;&#20123;&#65306;&#10;* first-letter&#10;* first-line&#10;* before&#10;* after&#10;&#10;&#30830;&#20266;&#31867;&#26377;&#21738;&#20123;&#65306;&#10;* active&#10;* focus&#10;* hover&#10;* link&#10;* visited&#10;* first-child&#10;* lang&#10;&#10;&#38656;&#35201;&#27880;&#24847;&#30340;&#26159;&#20266;&#31867;&#21644;&#20266;&#20803;&#32032;&#30340;&#24046;&#21035;&#65292;&#20266;&#31867;&#30340;&#20248;&#20808;&#32423;&#35201;&#39640;&#20110;&#20266;&#20803;&#32032;&#12290;&#20266;&#20803;&#32032;&#19968;&#33324;&#20351;&#29992;```::first-letter```&#65292;&#21069;&#38754;&#20004;&#20010;&#20882;&#21495;&#65292;&#32780;&#20266;&#31867;&#21482;&#26377;&#19968;&#20010;&#12290;&#20294;&#30446;&#21069;&#24050;&#30693;&#22788;&#20110;&#30456;&#20114;&#28151;&#28102;&#30340;&#29366;&#24577;&#12290;&#29992;&#19968;&#20010;&#20063;&#26159;&#21487;&#20197;&#30340;&#12290;&#21516;&#26102;&#24456;&#22810;&#20154;&#23558;```::before```&#21644;```::after```&#20063;&#19968;&#36215;&#31216;&#20026;&#20266;&#31867;&#65292;&#26356;&#21152;&#28151;&#28102;&#20102;&#20266;&#31867;&#21644;&#20266;&#20803;&#32032;&#12290;&#34429;&#28982;&#24179;&#24120;&#20351;&#29992;&#30340;&#26102;&#20505;&#24046;&#21035;&#24182;&#19981;&#22823;&#65292;&#20294;&#22312;&#35745;&#31639;&#20248;&#20808;&#32423;&#26435;&#37325;&#30340;&#26102;&#20505;&#36824;&#26159;&#26377;&#24046;&#21035;&#30340;&#65292;&#38656;&#35201;&#27880;&#24847;&#12290;&#10;&#10;##&#29305;&#27530;&#35268;&#21017;&#10;###!important&#27704;&#36828;&#35206;&#30422;&#20854;&#20182;&#10;&#24403;!important&#35268;&#21017;&#34987;&#29992;&#22312;&#19968;&#20010;&#26679;&#24335;&#22768;&#26126;&#20013;&#65292;&#36825;&#20010;&#26679;&#24335;&#22768;&#26126;&#20250;&#35206;&#30422;&#20219;&#20309;&#20854;&#20182;&#22768;&#26126;&#65292;&#26080;&#35770;&#22312;&#22768;&#26126;&#21015;&#34920;&#30340;&#37027;&#20010;&#20301;&#32622;&#65292;&#19982;&#20248;&#20808;&#32423;&#26080;&#20851;&#10;&#10;&#22914;&#19979;&#20363;&#25152;&#31034;&#65306;&#10;```html&#10;&#60;div class=&#34;outer&#34; style=&#34;color:red&#34;&#62;&#10;    &#60;p&#62;&#36825;&#26159;outer&#20013;&#30340;&#19968;&#27573;&#25991;&#23383;&#60;/p&#62;&#10;&#60;/div&#62;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>然后加上outer类的样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">.outer</span> <span class=\"rules\">&#123;</span><br><span class=\"line\">    <span class=\"rule\"><span class=\"attribute\">color</span>:<span class=\"value\"> green <span class=\"important\">!important</span></span></span>;</span><br><span class=\"line\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>最终结果:</p>\n<p><img src=\"/img/selector_priority/1.png\" alt=\"结果\"></p>\n<p>可见!important凌驾于一切之上</p>\n<h3 id=\":not伪类的优先级为0\">:not伪类的优先级为0</h3><p>需要注意的是伪类的优先级为0，比如如下例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"outer\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>这是outer中的文本，不属于inner<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"inner\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>这是inner中的文本<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>给其添加样式如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"rule\"><span class=\"attribute\">div</span>:<span class=\"value\"><span class=\"function\">not</span>(.outer) p &#123;</span><br><span class=\"line\">    color: green</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">div</span><span class=\"class\">.outer</span> <span class=\"tag\">p</span><span class=\"rules\">&#123;</span><br><span class=\"line\">    <span class=\"rule\"><span class=\"attribute\">color</span>:<span class=\"value\"> red</span></span>;</span><br><span class=\"line\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>结果如图：</p>\n<p><img src=\"/img/selector_priority/2.png\" alt=\"结果\"></p>\n<p>可以看到，outer的color属性为red，很好理解</p>\n<p>但inner的color也是red，可以检索一下元素发现：</p>\n<p><img src=\"/img/selector_priority/3.png\" alt=\"结果\"></p>\n<p>两个样式都被用在了inner上了，但<figure class=\"highlight\"><figcaption><span>p```被最终采用。说明```div:not(.outer) p```的优先级不会大于```div.outer p```。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#10;&#25509;&#19979;&#26469;&#32473;&#20004;&#20010;&#26679;&#24335;&#25442;&#20010;&#39034;&#24207;&#65306;&#10;```css&#10;div.outer p&#123;&#10;    color: red;&#10;&#125;&#10;&#10;div:not(.outer) p &#123;&#10;    color: green;&#10;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>F5看看输出效果，inner的color属性变成green了</p>\n<p><img src=\"/img/selector_priority/4.png\" alt=\"结果\"></p>\n<p>由此可以看出<code>div.outer p</code>的优先级也不会大于<code>div:not(.outer) p</code>。这俩优先级一样，会按照最后声明的样式进行加载。这也充分证明了<code>:not</code>伪类是没有优先级的</p>\n<h2 id=\"参考文献\">参考文献</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/CSS/Specificity\" target=\"_blank\" rel=\"external\">MDN的CSS优先级文章</a></p>\n<p><a href=\"http://www.w3.org/TR/selectors/#specificity\" target=\"_blank\" rel=\"external\">CSS3 Selectors Specificity</a></p>\n"}