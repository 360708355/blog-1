{"tags":[{"name":"JavaScript","permalink":"http://lingyu.wang/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":39}],"categories":[{"name":"笔试面试","permalink":"http://lingyu.wang/categories/笔试面试/","url":"/async/categories/笔试面试.json","count":8}],"url":"/async/posts/2014/02/11/javascript-puzzlers-2.json","date":1392048000000,"path":{"year":2014,"month":2,"day":11,"name":"javascript-puzzlers-2"},"subtitle":"javascript puzzlers的个人解答","title":"JavaScript选择题解答（21-37）","permalink":"http://lingyu.wang/2014/02/11/javascript-puzzlers-2/","content":"<p>最近做了个heroku上的JavaScript的测试（<a href=\"http://javascript-puzzlers.herokuapp.com/\" target=\"_blank\" rel=\"external\">题目地址</a>），错了一大堆，感觉js的概念还有很多不是很清晰，这里记录一下</p>\n<a id=\"more\"></a>\n<h3 id=\"第二十一题\">第二十一题</h3><p>What is the result of this expression? (or multiple ones)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">111111111111111110000</span>,</span><br><span class=\"line\">    b = <span class=\"number\">1111</span>;</span><br><span class=\"line\">a + b;</span><br></pre></td></tr></table></figure></p>\n<p>A: 111111111111111111111</p>\n<p>B: 111111111111111110000</p>\n<p>C: NaN</p>\n<p>D: Infinity</p>\n<p>又是一道考查JavaScript数字的题，与第七题考察点相似。由于JavaScript实际上只有一种数字形式IEEE 754标准的64位双精度浮点数，其所能表示的整数范围为-2^53~2^53(包括边界值)。这里的111111111111111110000已经超过了2^53次方，所以会发生精度丢失的情况。综上选B</p>\n<h3 id=\"第二十二题\">第二十二题</h3><p>What is the result of this expression? (or multiple ones)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = [].reverse;</span><br><span class=\"line\">x();</span><br></pre></td></tr></table></figure></p>\n<p>A: []</p>\n<p>B: undefined</p>\n<p>C: error</p>\n<p>D: window</p>\n<p>这题考查的是函数调用时的this和Array.prototype.reverse方法。</p>\n<p>首先看Array.prototype.reverse方法，首先举几个栗子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype.reverse.call(<span class=\"string\">\"skyinlayer\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//skyinlayer</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype.reverse.call(&#123;&#125;));</span><br><span class=\"line\"><span class=\"comment\">//Object &#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype.reverse.call(<span class=\"number\">123</span>));</span><br><span class=\"line\"><span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure></p>\n<p>这几个栗子可以得出一个结论，Array.prototype.reverse方法的返回值，就是this</p>\n<p>Javascript中this有如下几种情况：</p>\n<p>全局下this，指向window对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出结果：</span></span><br><span class=\"line\"><span class=\"comment\">//Window &#123;top: Window, window: Window, location: Location, external: Object, chrome: Object…&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>函数调用，this指向全局window对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">somefun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">somefun();</span><br><span class=\"line\"><span class=\"comment\">//输出结果：</span></span><br><span class=\"line\"><span class=\"comment\">//Window &#123;top: Window, window: Window, location: Location, external: Object, chrome: Object…&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>方法调用，this指向拥有该方法的对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someobj = &#123;&#125;;</span><br><span class=\"line\">someobj.fun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(someobj.fun());</span><br><span class=\"line\"><span class=\"comment\">//输出结果：</span></span><br><span class=\"line\"><span class=\"comment\">//Object &#123;fun: function&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>调用构造函数，构造函数内部的this指向新创建对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Con</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Con.prototype.somefun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Con());</span><br><span class=\"line\"><span class=\"comment\">//输出结果：</span></span><br><span class=\"line\"><span class=\"comment\">//Con &#123;somefun: function&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>显示确定this：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">somefun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">somefun.apply(<span class=\"string\">\"skyinlayer\"</span>);</span><br><span class=\"line\">somefun.call(<span class=\"string\">\"skyinlayer\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出结果：</span></span><br><span class=\"line\"><span class=\"comment\">//String &#123;0: \"s\", 1: \"k\", 2: \"y\", 3: \"i\", 4: \"n\", 5: \"l\", 6: \"a\", 7: \"y\", 8: \"e\", 9: \"r\", length: 10&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//String &#123;0: \"s\", 1: \"k\", 2: \"y\", 3: \"i\", 4: \"n\", 5: \"l\", 6: \"a\", 7: \"y\", 8: \"e\", 9: \"r\", length: 10&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里可以看到，使用的是函数调用方式，this指向的是全局对象window，所以选D</p>\n<h3 id=\"第二十三题\">第二十三题</h3><p>What is the result of this expression? (or multiple ones)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>.MIN_VALUE &gt; <span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<p>A: false</p>\n<p>B: true</p>\n<p>C: error</p>\n<p>D: other</p>\n<p>考查的Number.MIN_VALUE的概念，<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE\" target=\"_blank\" rel=\"external\">MDN传送门</a>，关键的几句话</p>\n<ul>\n<li><p>The Number.MIN_VALUE property represents the smallest positive numeric value representable in JavaScript.<br>翻译：Number.MIN_VALUE表示的是JavaScript中最小的正数</p>\n</li>\n<li><p>The MIN_VALUE property is the number closest to 0, not the most negative number, that JavaScript can represent.<br>翻译：MIN_VALUE是接近0的数，而不是最小的数</p>\n</li>\n<li><p>MIN_VALUE has a value of approximately 5e-324. Values smaller than MIN_VALUE (“underflow values”) are converted to 0.<br>翻译：MIN_VALUE值约等于5e-324，比起更小的值（大于0），将被转换为0</p>\n</li>\n</ul>\n<p>所以，这里是true，选B</p>\n<p>顺带把Number的几个常量拉出来：</p>\n<ul>\n<li>Number.MAX_VALUE：最大的正数</li>\n<li>Number.MIN_VALUE：最小的正数</li>\n<li>Number.NaN：特殊值，用来表示这不是一个数</li>\n<li>Number.NEGATIVE_INFINITY：负无穷大</li>\n<li>Number.POSITIVE_INFINITY：正无穷大</li>\n</ul>\n<p>如果要表示最小的负数和最大的负数，可以使用-Number.MAX_VALUE和-Number.MIN_VALUE</p>\n<h3 id=\"第二十四题\">第二十四题</h3><p>What is the result of this expression? (or multiple ones)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span> &lt; <span class=\"number\">2</span> &lt; <span class=\"number\">3</span>, <span class=\"number\">3</span> &lt; <span class=\"number\">2</span> &lt; <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure></p>\n<p>A: [true, true]</p>\n<p>B: [true, false]</p>\n<p>C: error</p>\n<p>D: other</p>\n<p>运算符的运算顺序和隐式类型转换的题，从<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\" target=\"_blank\" rel=\"external\">MDN上运算符优先级</a>，’&lt;’运算符顺序是从左到右，所以变成了[true &lt; 3, false &lt; 1]</p>\n<p>接着进行隐式类型转换，’&lt;’操作符的转换规则（来自<a href=\"http://www.cnblogs.com/mizzle/archive/2011/08/12/2135885.html\" target=\"_blank\" rel=\"external\">$雨$的文章《Javascript类型转换的规则》</a>）:</p>\n<ol>\n<li>如果两个操作值都是数值，则进行数值比较</li>\n<li>如果两个操作值都是字符串，则比较字符串对应的字符编码值</li>\n<li>如果只有一个操作值是数值，则将另一个操作值转换为数值，进行数值比较</li>\n<li>如果一个操作数是对象，则调用valueOf()方法（如果对象没有valueOf()方法则调用toString()方法），得到的结果按照前面的规则执行比较</li>\n<li>如果一个操作值是布尔值，则将其转换为数值，再进行比较</li>\n</ol>\n<p>所以，这里首先通过Number()转换为数字然后进行比较，true会转换成1，而false转换成0，就变成了[1 &lt; 3, 0 &lt; 1]</p>\n<p>所以结果为A</p>\n<h3 id=\"第二十五题\">第二十五题</h3><p>What is the result of this expression? (or multiple ones)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the most classic wtf</span></span><br><span class=\"line\"><span class=\"number\">2</span> == [[[<span class=\"number\">2</span>]]]</span><br></pre></td></tr></table></figure></p>\n<p>A: true</p>\n<p>B: false</p>\n<p>C: undefined</p>\n<p>D: other</p>\n<p>又是隐式类型转换的题（汗）</p>\n<p>题目作者的解释是：<br>both objects get converted to strings and in both cases the resulting string is “2”</p>\n<p>也就是说左右两边都被转换成了字符串，而字符串都是”2”</p>\n<p>这里首先需要对==右边的数组进行类型转换，根据以下规则（来自<a href=\"http://justjavac.iteye.com/blog/1848749\" target=\"_blank\" rel=\"external\">justjavac的文章《「译」JavaScript 的怪癖 1：隐式类型转换》</a>）：</p>\n<ol>\n<li>调用 valueOf()。如果结果是原始值（不是一个对象），则将其转换为一个数字。</li>\n<li>否则，调用 toString() 方法。如果结果是原始值，则将其转换为一个数字。</li>\n<li>否则，抛出一个类型错误。</li>\n</ol>\n<p>所以右侧被使用toString()方法转换为”2”，然后又通过Number(“2”)转换为数字2进行比较，结果就是true了，选A</p>\n<h3 id=\"第二十六题\">第二十六题</h3><p>What is the result of this expression? (or multiple ones)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3.</span>toString()</span><br><span class=\"line\"><span class=\"number\">3.</span>.toString()</span><br><span class=\"line\"><span class=\"number\">3.</span>..toString()</span><br></pre></td></tr></table></figure></p>\n<p>A: “3”, error, error</p>\n<p>B: “3”, “3.0”, error</p>\n<p>C: error, “3”, error</p>\n<p>D: other</p>\n<p>说实话这题有点常见了，很多人都踩过3.toString()的坑（包括我）…虽然JavaScript会在调用方法时对原始值进行包装，但是这个点是小数点呢、还是方法调用的点呢，于是乎第一个就是error了，因为JavaScript解释器会将其认为是小数点。</p>\n<p>而第二个则很好说通了，第一个点解释为小数点，变成了(3.0).toString()，结果就是”3”了</p>\n<p>第三个也是，第一个点为小数点，第二个是方法调用的点，但是后面接的不是一个合法的方法名，于是乎就error了</p>\n<p>综上，选C</p>\n<h3 id=\"第二十七题\">第二十七题</h3><p>What is the result of this expression? (or multiple ones)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = y = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x);</span><br></pre></td></tr></table></figure></p>\n<p>A: 1, 1</p>\n<p>B: error, error</p>\n<p>C: 1, error</p>\n<p>D: other</p>\n<p>变量提升和隐式定义全局变量的题，也是一个JavaScript经典的坑…</p>\n<p>还是那句话，在作用域内，变量定义和函数定义会先行提升，所以里面就变成了:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x;</span><br><span class=\"line\">    y = <span class=\"number\">1</span>;</span><br><span class=\"line\">    x = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>这点会问了，为什么不是<figure class=\"highlight\"><figcaption><span>x, y;```，这就是坑的地方...这里只会定义第一个变量x，而y则会通过不使用var的方式直接使用，于是乎就隐式定义了一个全局变量y</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#10;&#25152;&#20197;&#65292;y&#26159;&#20840;&#23616;&#20316;&#29992;&#22495;&#19979;&#65292;&#32780;x&#21017;&#26159;&#22312;&#20989;&#25968;&#20869;&#37096;&#65292;&#32467;&#26524;&#23601;&#20026;1, error&#65292;&#36873;C&#10;&#10;###&#31532;&#20108;&#21313;&#20843;&#39064;&#10;What is the result of this expression? (or multiple ones)&#10;```javascript&#10;var a = /123/,&#10;    b = /123/;&#10;a == b&#10;a === b</span><br></pre></td></tr></table></figure></p>\n<p>A: true, true</p>\n<p>B: true, false</p>\n<p>C: false, false</p>\n<p>D: other</p>\n<p>首先需要明确JavaScript的正则表达式是什么。JavaScript中的正则表达式依旧是对象，使用typeof运算符就能得出结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> /<span class=\"number\">123</span>/);</span><br><span class=\"line\"><span class=\"comment\">//输出结果：</span></span><br><span class=\"line\"><span class=\"comment\">//\"object\"</span></span><br></pre></td></tr></table></figure>\n<p>‘==’运算符左右两边都是对象时，会比较他们是否指向同一个对象，可以理解为C语言中两个指针的值是否一样（指向同一片内存），所以两个结果自然都是false</p>\n<h3 id=\"第二十九题\">第二十九题</h3><p>What is the result of this expression? (or multiple ones)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">    b = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">    c = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">a == b</span><br><span class=\"line\">a === b</span><br><span class=\"line\">a &gt; c</span><br><span class=\"line\">a &lt; c</span><br></pre></td></tr></table></figure></p>\n<p>A: false, false, false, true</p>\n<p>B: false, false, false, false</p>\n<p>C: true, true, false, true</p>\n<p>D: other</p>\n<p>和上题类似，JavaScript中Array的本质也是对象，所以前两个的结果都是false，</p>\n<p>而JavaScript中Array的’&gt;’运算符和’&lt;’运算符的比较方式类似于字符串比较字典序，会从第一个元素开始进行比较，如果一样比较第二个，还一样就比较第三个，如此类推，所以第三个结果为false，第四个为true。</p>\n<p>综上所述，结果为false, false, false, true，选A</p>\n<h3 id=\"第三十题\">第三十题</h3><p>What is the result of this expression? (or multiple ones)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;, b = <span class=\"built_in\">Object</span>.prototype;</span><br><span class=\"line\">[a.prototype === b, <span class=\"built_in\">Object</span>.getPrototypeOf(a) === b]</span><br></pre></td></tr></table></figure></p>\n<p>A: [false, true]</p>\n<p>B: [true, true]</p>\n<p>C: [false, false]</p>\n<p>D: other</p>\n<p>原型链的题（总会有的），考查的__proto__和prototype的区别。首先要明确对象和构造函数的关系，对象在创建的时候，其__proto__会指向其构造函数的prototype属性</p>\n<p>Object实际上是一个构造函数（typeof Object的结果为”function”）,使用字面量创建对象和new Object创建对象是一样的，所以a.__proto__也就是Object.prototype，而Object.getPrototypeOf(a)与a.__proto__是一样的，所以第二个结果为true</p>\n<p>而实例对象是没有prototype属性的，只有函数才有，所以a.prototype其实是undefined，第一个结果为false</p>\n<p>综上，选A</p>\n<h3 id=\"第三十一题\">第三十一题</h3><p>What is the result of this expression? (or multiple ones)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = f.prototype, b = <span class=\"built_in\">Object</span>.getPrototypeOf(f);</span><br><span class=\"line\">a === b</span><br></pre></td></tr></table></figure></p>\n<p>A: true</p>\n<p>B: false</p>\n<p>C: null</p>\n<p>D: other</p>\n<p>还是__proto__和prototype的区别，两者不是一个东西，所以选B</p>\n<h3 id=\"第三十二题\">第三十二题</h3><p>What is the result of this expression? (or multiple ones)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oldName = foo.name;</span><br><span class=\"line\">foo.name = <span class=\"string\">\"bar\"</span>;</span><br><span class=\"line\">[oldName, foo.name]</span><br></pre></td></tr></table></figure></p>\n<p>A: error</p>\n<p>B: [“”, “”]</p>\n<p>C: [“foo”, “foo”]</p>\n<p>D: [“foo”, “bar”]</p>\n<p>考察了函数的name属性，使用函数定义方式时，会给function对象本身添加一个name属性，保存了函数的名称，很好理解oldName为”foo”。name属性时只读的，不允许修改，所以<figure class=\"highlight\"><figcaption><span>= \"bar\";```之后，foo.name还是\"foo\"，所以结果为\\[\"foo\", \"foo\"\\]，选C</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#10;PS&#65306;name&#23646;&#24615;&#19981;&#26159;&#19968;&#20010;&#26631;&#20934;&#23646;&#24615;&#65292;&#19981;&#35201;&#21435;&#20351;&#29992;&#65292;&#38500;&#38750;&#20320;&#24819;&#35201;&#22353;&#21035;&#20154;&#10;&#10;###&#31532;&#19977;&#21313;&#19977;&#39064;&#10;What is the result of this expression? (or multiple ones)&#10;```javascript&#10;&#34;1 2 3&#34;.replace(/\\d/g, parseInt)</span><br></pre></td></tr></table></figure></p>\n<p>A: “1 2 3”</p>\n<p>B: “0 1 2”</p>\n<p>C: “NaN 2 3”</p>\n<p>D: “1 NaN 3”</p>\n<p>String.prototype.replace、正则表达式的全局匹配和parseInt（又是parseInt…），可以根据题意看出来题目上漏了一个’\\’</p>\n<p>首先需要确定replace会传给parseInt哪些参数。举个栗子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"1 2 3\"</span>.replace(<span class=\"regexp\">/\\d/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//输出结果：</span></span><br><span class=\"line\"><span class=\"comment\">//[\"1\", 0, \"1 2 3\"]</span></span><br><span class=\"line\"><span class=\"comment\">//[\"2\", 2, \"1 2 3\"]</span></span><br><span class=\"line\"><span class=\"comment\">//[\"3\", 4, \"1 2 3\"]</span></span><br></pre></td></tr></table></figure></p>\n<p>一共三个：</p>\n<ol>\n<li>match：正则表达式被匹配到的子字符串</li>\n<li>offset：被匹配到的子字符串在原字符串中的位置</li>\n<li>string：原字符串</li>\n</ol>\n<p>这样就很好理解了，又回到之前parseInt的问题了，结果就是parseInt(“1”, 10), parseInt(“2”, 2), parseInt(“3”, 4)所以结果为”1, NaN, 3”，选D</p>\n<h3 id=\"第三十四题\">第三十四题</h3><p>What is the result of this expression? (or multiple ones)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"built_in\">Object</span>.getPrototypeOf(f);</span><br><span class=\"line\">f.name <span class=\"comment\">// ?</span></span><br><span class=\"line\">parent.name <span class=\"comment\">// ?</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">eval</span>(f.name) <span class=\"comment\">// ?</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">eval</span>(parent.name) <span class=\"comment\">//  ?</span></span><br></pre></td></tr></table></figure></p>\n<p>A: “f”, “Empty”, “function”, “function”</p>\n<p>B: “f”, undefined, “function”, error</p>\n<p>C: “f”, “Empty”, “function”, error</p>\n<p>D: other</p>\n<p>又是Function.name属性的题，和三十二题一样样，f.name值为”f”，而eval(“f”)则会输出f函数，所以结果为”function”</p>\n<p>接着看parent，parent实际上就是f.__proto__，需要明确的是JavaScript中的函数也是对象，其也有自己的构造函数Function，所以f.__proto__ === Function.prototype结果是true，而Function.prototype就是一个名为Empty的function<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span>.prototype);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span>.prototype.name);</span><br><span class=\"line\"><span class=\"comment\">//输出结果：</span></span><br><span class=\"line\"><span class=\"comment\">//function Empty() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//Empty</span></span><br></pre></td></tr></table></figure></p>\n<p>所以parent.name的值为Empty</p>\n<p>如果想直接在全局作用域下调用Empty，显示未定义…因为Empty并不在全局作用域下</p>\n<p>综上所述，结果为C</p>\n<h3 id=\"第三十五题\">第三十五题</h3><p>What is the result of this expression? (or multiple ones)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lowerCaseOnly =  <span class=\"regexp\">/^[a-z]+$/</span>;</span><br><span class=\"line\">[lowerCaseOnly.test(<span class=\"literal\">null</span>), lowerCaseOnly.test()]</span><br></pre></td></tr></table></figure></p>\n<p>A: [true, false]</p>\n<p>B: error</p>\n<p>C: [true, true]</p>\n<p>D: [false, true]</p>\n<p>正则表达式的test方法会自动将参数转换为字符串，原式就变成了<figure class=\"highlight\"><figcaption><span>lowerCaseOnly.test(\"undefined\")]```，结果都是真，所以选C</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#10;###&#31532;&#19977;&#21313;&#20845;&#39064;&#10;What is the result of this expression? (or multiple ones)&#10;```javascript&#10;[,,,].join(&#34;, &#34;)</span><br></pre></td></tr></table></figure></p>\n<p>A: “, , , “</p>\n<p>B: “undefined, undefined, undefined, undefined”</p>\n<p>C: “, , “</p>\n<p>D: “”</p>\n<p>JavaScript中使用字面量创建数组时，如果最末尾有一个逗号’,’，会背省略，所以实际上这个数组只有三个元素（都是undefined）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log([,,,].length);</span><br><span class=\"line\"><span class=\"comment\">//输出结果：</span></span><br><span class=\"line\"><span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure></p>\n<p>而三个元素，使用join方法，只需要添加两次，所以结果为”, , “，选C</p>\n<h3 id=\"第三十七题\">第三十七题</h3><p>What is the result of this expression? (or multiple ones)<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &#123;class: \"Animal\", name: 'Fido'&#125;;</span><br><span class=\"line\">a.class</span><br></pre></td></tr></table></figure></p>\n<p>A: “Animal”</p>\n<p>B: Object</p>\n<p>C: an error</p>\n<p>D: other</p>\n<p>经典坑中的一个，class是关键字。根据浏览器的不同，结果不同：</p>\n<p>chrome的结果： “Animal”</p>\n<p>Firefox的结果：”Animal”</p>\n<p>Opera的结果：”Animal”</p>\n<p>IE 8以上也是： “Animal”</p>\n<p>IE 8 及以下： 报错</p>\n<h3 id=\"总结\">总结</h3><p>终于把37题全部弄完了，虽然很多题都偏而怪，但其中涉及的知识还是相当重要的。JavaScript中的糟粕和精华永远是一个话题，也是笔试面试时经常遇到的问题。</p>\n"}