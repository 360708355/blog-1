{"name":"NodeJs","permalink":"http://lingyu.wang/tags/NodeJs/","url":"/async/tags/NodeJs.json","count":14,"_total":14,"_totalPage":2,"_page":1,"posts":[{"tags":[{"name":"NodeJs","permalink":"http://lingyu.wang/tags/NodeJs/","url":"/async/tags/NodeJs.json","count":14},{"name":"WebIM","permalink":"http://lingyu.wang/tags/WebIM/","url":"/async/tags/WebIM.json","count":9},{"name":"WebSocket","permalink":"http://lingyu.wang/tags/WebSocket/","url":"/async/tags/WebSocket.json","count":8},{"name":"xmpp","permalink":"http://lingyu.wang/tags/xmpp/","url":"/async/tags/xmpp.json","count":1}],"categories":[{"name":"即时通信","permalink":"http://lingyu.wang/categories/即时通信/","url":"/async/categories/即时通信.json","count":9}],"url":"/async/posts/2013/12/08/websocket.json","date":1386432000000,"path":{"year":2013,"month":12,"day":8,"name":"websocket"},"subtitle":"使用WebSocket+NodeJs搭建聊天室","title":"搭建HTML5简易聊天室","permalink":"http://lingyu.wang/2013/12/08/websocket/","content":"<h3 id=\"前面的话\">前面的话</h3><hr>\n<p>之前曾经写过一个符合xmpp协议的Web IM，但使用的是JSJaC，后台用的也是与之配套的jabber client，发现nodejs的事件模式更适合作为Web IM的客户端。</p>\n<p>而传统的ajax轮询机制也早晚被全双工websocket所取代，所以就打算在我的毕业设计的Web IM平台中使用websocket。</p>\n<p>在这里调研一下并作出了一个简单的版聊demo，这里讲一下这个简单demo的实现方式</p>"},{"tags":[{"name":"JavaScript","permalink":"http://lingyu.wang/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":40},{"name":"NodeJs","permalink":"http://lingyu.wang/tags/NodeJs/","url":"/async/tags/NodeJs.json","count":14},{"name":"WebIM","permalink":"http://lingyu.wang/tags/WebIM/","url":"/async/tags/WebIM.json","count":9},{"name":"WebRTC","permalink":"http://lingyu.wang/tags/WebRTC/","url":"/async/tags/WebRTC.json","count":8},{"name":"WebSocket","permalink":"http://lingyu.wang/tags/WebSocket/","url":"/async/tags/WebSocket.json","count":8}],"categories":[{"name":"即时通信","permalink":"http://lingyu.wang/categories/即时通信/","url":"/async/categories/即时通信.json","count":9}],"url":"/async/posts/2014/05/22/webrtc-data-channels.json","date":1400688000000,"path":{"year":2014,"month":5,"day":22,"name":"webrtc-data-channels"},"subtitle":"使用WebRTC的数据通道实现高效的数据传输","title":"WebRTC的RTCDataChannel","permalink":"http://lingyu.wang/2014/05/22/webrtc-data-channels/","content":"<p>在两个浏览器中，为聊天、游戏、或是文件传输等需求发送信息是十分复杂的。通常情况下，我们需要建立一台服务器来转发数据，当然规模比较大的情况下，会扩展成多个数据中心。这种情况下很容易出现很高的延迟，同时难以保证数据的私密性。</p>\n<p>这些问题可以通过WebRTC提供的RTCDataChannel API来解决，他能直接在点对点之间传输数据。这篇文章将介绍如何创建并使用数据通道，并提供了一些网络上常见的用例</p>"},{"tags":[{"name":"JavaScript","permalink":"http://lingyu.wang/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":40},{"name":"NodeJs","permalink":"http://lingyu.wang/tags/NodeJs/","url":"/async/tags/NodeJs.json","count":14},{"name":"WebIM","permalink":"http://lingyu.wang/tags/WebIM/","url":"/async/tags/WebIM.json","count":9},{"name":"WebRTC","permalink":"http://lingyu.wang/tags/WebRTC/","url":"/async/tags/WebRTC.json","count":8},{"name":"WebSocket","permalink":"http://lingyu.wang/tags/WebSocket/","url":"/async/tags/WebSocket.json","count":8}],"categories":[{"name":"即时通信","permalink":"http://lingyu.wang/categories/即时通信/","url":"/async/categories/即时通信.json","count":9}],"url":"/async/posts/2014/03/18/webRTC-2.json","date":1395072000000,"path":{"year":2014,"month":3,"day":18,"name":"webRTC-2"},"subtitle":"使用WebRTC + WebSocket搭建视频聊天室","title":"使用WebRTC搭建前端视频聊天室——信令篇","permalink":"http://lingyu.wang/2014/03/18/webRTC-2/","content":"<p>由于毕设研究定的题目是即时通信相关，于是乎决定研究一下WebRTC来实现浏览器内的音频聊天，同时探究一下WebRTC能做些什么</p>"},{"tags":[{"name":"JavaScript","permalink":"http://lingyu.wang/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":40},{"name":"NodeJs","permalink":"http://lingyu.wang/tags/NodeJs/","url":"/async/tags/NodeJs.json","count":14},{"name":"WebIM","permalink":"http://lingyu.wang/tags/WebIM/","url":"/async/tags/WebIM.json","count":9},{"name":"WebRTC","permalink":"http://lingyu.wang/tags/WebRTC/","url":"/async/tags/WebRTC.json","count":8},{"name":"WebSocket","permalink":"http://lingyu.wang/tags/WebSocket/","url":"/async/tags/WebSocket.json","count":8}],"categories":[{"name":"即时通信","permalink":"http://lingyu.wang/categories/即时通信/","url":"/async/categories/即时通信.json","count":9}],"url":"/async/posts/2014/03/15/webRTC-1.json","date":1394812800000,"path":{"year":2014,"month":3,"day":15,"name":"webRTC-1"},"subtitle":"使用WebRTC + WebSocket搭建视频聊天室","title":"使用WebRTC搭建前端视频聊天室——入门篇","permalink":"http://lingyu.wang/2014/03/15/webRTC-1/","content":"<p>由于毕设研究定的题目是即时通信相关，于是乎决定研究一下WebRTC来实现浏览器内的音频聊天，同时探究一下WebRTC能做些什么</p>"},{"tags":[{"name":"JavaScript","permalink":"http://lingyu.wang/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":40},{"name":"NodeJs","permalink":"http://lingyu.wang/tags/NodeJs/","url":"/async/tags/NodeJs.json","count":14}],"categories":[{"name":"JS技术","permalink":"http://lingyu.wang/categories/JS技术/","url":"/async/categories/JS技术.json","count":13}],"url":"/async/posts/2014/03/19/v8-gc.json","date":1395158400000,"path":{"year":2014,"month":3,"day":19,"name":"v8-gc"},"subtitle":"介绍了V8引擎的垃圾回收器所使用的算法以及进行的优化","title":"浅谈V8引擎中的垃圾回收机制","permalink":"http://lingyu.wang/2014/03/19/v8-gc/","content":"<p>这篇文章的所有内容均来自 朴灵的《深入浅出Node.js》及<a href=\"http://www.jayconrod.com/posts/55/a-tour-of-v8-garbage-collection\">A tour of V8:Garbage Collection</a>，后者还有中文翻译版<a href=\"http://newhtml.net/v8-garbage-collection/\">V8 之旅： 垃圾回收器</a>，我在这里只是做了个记录和结合</p>"},{"tags":[{"name":"NodeJs","permalink":"http://lingyu.wang/tags/NodeJs/","url":"/async/tags/NodeJs.json","count":14}],"categories":[{"name":"翻译","permalink":"http://lingyu.wang/categories/翻译/","url":"/async/categories/翻译.json","count":11}],"url":"/async/posts/2014/11/24/risingstack-nodejs-style-guide.json","date":1416758400000,"path":{"year":2014,"month":11,"day":24,"name":"risingstack-nodejs-style-guide"},"subtitle":"A mostly reasonable approach to JavaScript - how we write Node.js at RisingStack","title":"RisingStack的Node.js风格指南","permalink":"http://lingyu.wang/2014/11/24/risingstack-nodejs-style-guide/","content":"<p>本文翻译自<a href=\"https://github.com/RisingStack/node-style-guide\">RisingStack/node-style-guide</a></p>"},{"tags":[{"name":"ES6","permalink":"http://lingyu.wang/tags/ES6/","url":"/async/tags/ES6.json","count":2},{"name":"NodeJs","permalink":"http://lingyu.wang/tags/NodeJs/","url":"/async/tags/NodeJs.json","count":14},{"name":"koa","permalink":"http://lingyu.wang/tags/koa/","url":"/async/tags/koa.json","count":1}],"categories":[{"name":"NodeJs","permalink":"http://lingyu.wang/categories/NodeJs/","url":"/async/categories/NodeJs.json","count":3}],"url":"/async/posts/2014/09/24/koa-anywhere.json","date":1411488000000,"path":{"year":2014,"month":9,"day":24,"name":"koa-anywhere"},"subtitle":"通过一条命令，将当前目录变成一个静态文件服务器","title":"koa-anywhere","permalink":"http://lingyu.wang/2014/09/24/koa-anywhere/","content":"<p>最近写了一个快速启动静态文件服务器的NodeJs包<a href=\"https://github.com/LingyuCoder/koa-anywhere\">koa-anywhere</a>，可以通过一条命令快速的启动静态文件服务器，而且支持多级目录。目前已经发到了NPM上了</p>"},{"tags":[{"name":"Gulp","permalink":"http://lingyu.wang/tags/Gulp/","url":"/async/tags/Gulp.json","count":2},{"name":"JavaScript","permalink":"http://lingyu.wang/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":40},{"name":"NodeJs","permalink":"http://lingyu.wang/tags/NodeJs/","url":"/async/tags/NodeJs.json","count":14}],"categories":[{"name":"翻译","permalink":"http://lingyu.wang/categories/翻译/","url":"/async/categories/翻译.json","count":11}],"url":"/async/posts/2014/10/06/gulp-vision-history-future.json","date":1412524800000,"path":{"year":2014,"month":10,"day":6,"name":"gulp-vision-history-future"},"subtitle":"The vision, history, and future of the project","title":"Gulp -- 项目的愿景、过去和将来","permalink":"http://lingyu.wang/2014/10/06/gulp-vision-history-future/","content":"<p><strong>本文翻译自<a href=\"https://medium.com/@contrahacks/gulp-3828e8126466\">gulp — The vision, history, and future of the project</a></strong></p>\n<p>gulp是一个将vinyl、vinyl-fs、orchestrator、命令行工具以及一系列用于帮助开发者构建优秀插件的指导方针等集于一身的小巧构建工具。尽管它功能很少，但它却完全打破了构建工具生态体系，并通过许多优秀的项目掀起了一股改革你的工作流程的浪潮。</p>"},{"tags":[{"name":"Gulp","permalink":"http://lingyu.wang/tags/Gulp/","url":"/async/tags/Gulp.json","count":2},{"name":"JavaScript","permalink":"http://lingyu.wang/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":40},{"name":"NodeJs","permalink":"http://lingyu.wang/tags/NodeJs/","url":"/async/tags/NodeJs.json","count":14}],"categories":[{"name":"翻译","permalink":"http://lingyu.wang/categories/翻译/","url":"/async/categories/翻译.json","count":11}],"url":"/async/posts/2014/10/07/getting-gulpy.json","date":1412611200000,"path":{"year":2014,"month":10,"day":7,"name":"getting-gulpy"},"subtitle":"Getting gulpy -- Advanced tips for using gulp.js","title":"Gulp思维 —— Gulp高级技巧","permalink":"http://lingyu.wang/2014/10/07/getting-gulpy/","content":"<p><strong>本文翻译自<a href=\"https://medium.com/@webprolific/getting-gulpy-a2010c13d3d5\">Getting gulpy — Advanced tips for using gulp.js</a></strong></p>\n<p>感受过<a href=\"http://gulpjs.com/\">gulp.js</a>带来的兴奋过后，你需要的不仅仅是它的光鲜，而是切切实实的实例。这篇文章讨论了一些使用gulp.js时常踩的坑，以及一些更加高级和定制化的插件和流的使用技巧。</p>"},{"tags":[{"name":"ES6","permalink":"http://lingyu.wang/tags/ES6/","url":"/async/tags/ES6.json","count":2},{"name":"Generator","permalink":"http://lingyu.wang/tags/Generator/","url":"/async/tags/Generator.json","count":1},{"name":"JavaScript","permalink":"http://lingyu.wang/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":40},{"name":"NodeJs","permalink":"http://lingyu.wang/tags/NodeJs/","url":"/async/tags/NodeJs.json","count":14}],"categories":[{"name":"NodeJs","permalink":"http://lingyu.wang/categories/NodeJs/","url":"/async/categories/NodeJs.json","count":3}],"url":"/async/posts/2014/07/29/generator.json","date":1406563200000,"path":{"year":2014,"month":7,"day":29,"name":"generator"},"subtitle":"剖析Generator的本质","title":"细说Generator","permalink":"http://lingyu.wang/2014/07/29/generator/","content":"<p>好久没写东西了，今天看了下ES6的Generator的相关知识，在这里记录一下。主要内容翻译自规范，并加入了自己的理解和总结</p>"}]}